
C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00800060  000037c4  00003858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800164  00800164  0000395c  2**0
                  ALLOC
  3 .stab         00003318  00000000  00000000  0000395c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fd9  00000000  00000000  00006c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b082  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c004  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c446  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__vector_10>
      2c:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <main>
      8a:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e5       	ldi	r26, 0x5B	; 91
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e5       	ldi	r24, 0x5B	; 91
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e5       	ldi	r22, 0x5B	; 91
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:


void (*CallBackPointer) (void);

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*Set ref volatage*/
#if ADC_Mode_Voltage ==ADC_AVCC

	SET_BIT(ADMUX , 6);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX , 7);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24

	/*prescaler value*/

#if ADC_Prescaler_Option == ADC_Prescaler_2

	CLEAR_BIT(ADCSRA , 0 );
     cc2:	a6 e2       	ldi	r26, 0x26	; 38
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e6 e2       	ldi	r30, 0x26	; 38
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8e 7f       	andi	r24, 0xFE	; 254
     cce:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA , 1 );
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8d 7f       	andi	r24, 0xFD	; 253
     cdc:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA , 2 );
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8b 7f       	andi	r24, 0xFB	; 251
     cea:	8c 93       	st	X, r24
#endif


	/* Eight bit mode which is Mode Left adusted  */
#if ADC_Mode == Eight_Bit_Mode
	SET_BIT(ADMUX , 5);
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	8c 93       	st	X, r24
	/* Ten bit mode which is right adjusted */
#else
	CLEAR_BIT(ADMUX , 5);
#endif
	/*Clear interrupt flag and disable interrupt*/
	CLEAR_BIT(ADCSRA , 4);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7e       	andi	r24, 0xEF	; 239
     d06:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA , 3);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	87 7f       	andi	r24, 0xF7	; 247
     d14:	8c 93       	st	X, r24

	/*Enable ADC Module*/
	SET_BIT(ADCSRA , 7);
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	8c 93       	st	X, r24

}
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <ADC_voidEnableInt>:

void ADC_voidEnableInt(void)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA , 3);
     d32:	a6 e2       	ldi	r26, 0x26	; 38
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	8c 93       	st	X, r24
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <ADC_voidDisableInt>:

void ADC_voidDisableInt(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA , 3);
     d4e:	a6 e2       	ldi	r26, 0x26	; 38
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e6 e2       	ldi	r30, 0x26	; 38
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	8c 93       	st	X, r24
}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <ADC_voidSetCallBack>:

void ADC_voidSetCallBack( void (*Copy_Ptr) (void) )
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <ADC_voidSetCallBack+0x6>
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
	CallBackPointer = Copy_Ptr ;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	90 93 72 01 	sts	0x0172, r25
     d78:	80 93 71 01 	sts	0x0171, r24
}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <ADC_voidEnableADC>:

void ADC_voidEnableADC(void)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA , 7);
     d8e:	a6 e2       	ldi	r26, 0x26	; 38
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e6 e2       	ldi	r30, 0x26	; 38
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	80 68       	ori	r24, 0x80	; 128
     d9a:	8c 93       	st	X, r24
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <ADC_voidDisableADC>:

void ADC_voidDisableADC(void)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA , 7);
     daa:	a6 e2       	ldi	r26, 0x26	; 38
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e6 e2       	ldi	r30, 0x26	; 38
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	8f 77       	andi	r24, 0x7F	; 127
     db6:	8c 93       	st	X, r24
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <ADC_uint8GetConversionValue>:

#if ADC_Mode == Eight_Bit_Mode

uint8 ADC_uint8GetConversionValue(uint8 Channel , uint8 * Result)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <ADC_uint8GetConversionValue+0x6>
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <ADC_uint8GetConversionValue+0x8>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	7b 83       	std	Y+3, r23	; 0x03
     dce:	6a 83       	std	Y+2, r22	; 0x02
	ADMUX &= 0b11100000 ;
     dd0:	a7 e2       	ldi	r26, 0x27	; 39
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e7 e2       	ldi	r30, 0x27	; 39
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 7e       	andi	r24, 0xE0	; 224
     ddc:	8c 93       	st	X, r24
	ADMUX |= Channel ;
     dde:	a7 e2       	ldi	r26, 0x27	; 39
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e2       	ldi	r30, 0x27	; 39
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	90 81       	ld	r25, Z
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	89 2b       	or	r24, r25
     dec:	8c 93       	st	X, r24

	/*Start Coversion*/
	SET_BIT(ADCSRA , 6);
     dee:	a6 e2       	ldi	r26, 0x26	; 38
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e6 e2       	ldi	r30, 0x26	; 38
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 64       	ori	r24, 0x40	; 64
     dfa:	8c 93       	st	X, r24
	/*Get Interrupt enable bit status*/
	if( GET_BIT(ADCSRA , 3) == 1)
     dfc:	e6 e2       	ldi	r30, 0x26	; 38
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	86 95       	lsr	r24
     e04:	86 95       	lsr	r24
     e06:	86 95       	lsr	r24
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	81 70       	andi	r24, 0x01	; 1
     e0e:	90 70       	andi	r25, 0x00	; 0
     e10:	88 23       	and	r24, r24
     e12:	11 f0       	breq	.+4      	; 0xe18 <ADC_uint8GetConversionValue+0x5a>
	{
		return NOK ;
     e14:	1c 82       	std	Y+4, r1	; 0x04
     e16:	1a c0       	rjmp	.+52     	; 0xe4c <ADC_uint8GetConversionValue+0x8e>
	}

	/*if enable retun not ok*/
	else 
	{
		while(GET_BIT(ADCSRA , 4) == 0);
     e18:	e6 e2       	ldi	r30, 0x26	; 38
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	82 95       	swap	r24
     e20:	8f 70       	andi	r24, 0x0F	; 15
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	81 70       	andi	r24, 0x01	; 1
     e28:	90 70       	andi	r25, 0x00	; 0
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	a9 f3       	breq	.-22     	; 0xe18 <ADC_uint8GetConversionValue+0x5a>
		SET_BIT(ADCSRA , 4);
     e2e:	a6 e2       	ldi	r26, 0x26	; 38
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e6 e2       	ldi	r30, 0x26	; 38
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 61       	ori	r24, 0x10	; 16
     e3a:	8c 93       	st	X, r24
		* Result = ADCH ;
     e3c:	e5 e2       	ldi	r30, 0x25	; 37
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	ea 81       	ldd	r30, Y+2	; 0x02
     e44:	fb 81       	ldd	r31, Y+3	; 0x03
     e46:	80 83       	st	Z, r24
		return OK ;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	8c 83       	std	Y+4, r24	; 0x04
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	/*if disable wait for flag and clear flag read high in pointer and return Ok*/

}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <ADC_uint8GetLastValue>:

uint8 ADC_uint8GetLastValue(void)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	return ADCH;
     e64:	e5 e2       	ldi	r30, 0x25	; 37
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
}
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <__vector_16>:



void __vector_16(void) __attribute__((signal , used));
void __vector_16(void)
{
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	5f 93       	push	r21
     e82:	6f 93       	push	r22
     e84:	7f 93       	push	r23
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
     e8a:	af 93       	push	r26
     e8c:	bf 93       	push	r27
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	CallBackPointer();
     e9a:	e0 91 71 01 	lds	r30, 0x0171
     e9e:	f0 91 72 01 	lds	r31, 0x0172
     ea2:	09 95       	icall
}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <DIO_vid_Init>:
#include "DIO_priv.h"
#include "DIO_config.h"


void DIO_vid_Init(void)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_uint8_PORTA_DIRECTION ;
     ed2:	ea e3       	ldi	r30, 0x3A	; 58
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	80 83       	st	Z, r24
	DDRB = DIO_uint8_PORTB_DIRECTION ;
     eda:	e7 e3       	ldi	r30, 0x37	; 55
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	80 83       	st	Z, r24
	DDRC = DIO_uint8_PORTC_DIRECTION ;
     ee2:	e4 e3       	ldi	r30, 0x34	; 52
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	80 83       	st	Z, r24
	DDRD = DIO_uint8_PORTD_DIRECTION ;
     eea:	e1 e3       	ldi	r30, 0x31	; 49
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	80 83       	st	Z, r24

}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <DIO_vid_SetPinValue>:

void DIO_vid_SetPinValue(uint8 Copy_uint8_PinNo , uint8 Copy_uint8_Value)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <DIO_vid_SetPinValue+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	6a 83       	std	Y+2, r22	; 0x02
	if( (Copy_uint8_PinNo >=DIO_uint8_PORTA_START) && (Copy_uint8_PinNo <=DIO_uint8_PORTA_END) )
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	58 f5       	brcc	.+86     	; 0xf62 <DIO_vid_SetPinValue+0x6a>
			{
				/*Get Valid Range for PORTB pins */
				//Copy_uint8PinNum = Copy_uint8PinNum - DIO_uint8_PORTA_SIZE ;
				if(Copy_uint8_Value == DIO_uint8_HIGH)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	a1 f4       	brne	.+40     	; 0xf3a <DIO_vid_SetPinValue+0x42>
				{
					SET_BIT(PORTA , Copy_uint8_PinNo);
     f12:	ab e3       	ldi	r26, 0x3B	; 59
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	eb e3       	ldi	r30, 0x3B	; 59
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_vid_SetPinValue+0x38>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_vid_SetPinValue+0x34>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	14 c0       	rjmp	.+40     	; 0xf62 <DIO_vid_SetPinValue+0x6a>
				}
				else
				{
					CLEAR_BIT(PORTA , Copy_uint8_PinNo);
     f3a:	ab e3       	ldi	r26, 0x3B	; 59
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	eb e3       	ldi	r30, 0x3B	; 59
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_vid_SetPinValue+0x60>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_vid_SetPinValue+0x5c>
     f5c:	80 95       	com	r24
     f5e:	84 23       	and	r24, r20
     f60:	8c 93       	st	X, r24
				}
			}
	if( (Copy_uint8_PinNo >= DIO_uint8_PORTB_START) && (Copy_uint8_PinNo <= DIO_uint8_PORTB_END) )
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	88 30       	cpi	r24, 0x08	; 8
     f66:	88 f1       	brcs	.+98     	; 0xfca <DIO_vid_SetPinValue+0xd2>
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	80 31       	cpi	r24, 0x10	; 16
     f6c:	70 f5       	brcc	.+92     	; 0xfca <DIO_vid_SetPinValue+0xd2>
		{
			/*Get Valid Range for PORTB pins */
			Copy_uint8_PinNo = Copy_uint8_PinNo - DIO_uint8_PORTA_SIZE ;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	88 50       	subi	r24, 0x08	; 8
     f72:	89 83       	std	Y+1, r24	; 0x01
			if(Copy_uint8_Value == DIO_uint8_HIGH)
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	a1 f4       	brne	.+40     	; 0xfa2 <DIO_vid_SetPinValue+0xaa>
			{
				SET_BIT(PORTB , Copy_uint8_PinNo);
     f7a:	a8 e3       	ldi	r26, 0x38	; 56
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e8 e3       	ldi	r30, 0x38	; 56
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_vid_SetPinValue+0xa0>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_vid_SetPinValue+0x9c>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	14 c0       	rjmp	.+40     	; 0xfca <DIO_vid_SetPinValue+0xd2>
			}
			else
			{
					CLEAR_BIT(PORTB , Copy_uint8_PinNo);
     fa2:	a8 e3       	ldi	r26, 0x38	; 56
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 e3       	ldi	r30, 0x38	; 56
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_vid_SetPinValue+0xc8>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_vid_SetPinValue+0xc4>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
			}
		}

		if( (Copy_uint8_PinNo >=DIO_uint8_PORTC_START) && (Copy_uint8_PinNo <=DIO_uint8_PORTC_END) )
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	80 31       	cpi	r24, 0x10	; 16
     fce:	88 f1       	brcs	.+98     	; 0x1032 <DIO_vid_SetPinValue+0x13a>
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	88 31       	cpi	r24, 0x18	; 24
     fd4:	70 f5       	brcc	.+92     	; 0x1032 <DIO_vid_SetPinValue+0x13a>
		{
			/*Get Valid Range for PORTC pins */
			Copy_uint8_PinNo = Copy_uint8_PinNo - (DIO_uint8_PORTA_SIZE  + DIO_uint8_PORTB_SIZE ) ;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	80 51       	subi	r24, 0x10	; 16
     fda:	89 83       	std	Y+1, r24	; 0x01
			if(Copy_uint8_Value == DIO_uint8_HIGH)
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	a1 f4       	brne	.+40     	; 0x100a <DIO_vid_SetPinValue+0x112>
			{
				SET_BIT(PORTC , Copy_uint8_PinNo);
     fe2:	a5 e3       	ldi	r26, 0x35	; 53
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e5 e3       	ldi	r30, 0x35	; 53
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_vid_SetPinValue+0x108>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_vid_SetPinValue+0x104>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	14 c0       	rjmp	.+40     	; 0x1032 <DIO_vid_SetPinValue+0x13a>
			}
			else
			{
					CLEAR_BIT(PORTC , Copy_uint8_PinNo);
    100a:	a5 e3       	ldi	r26, 0x35	; 53
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e5 e3       	ldi	r30, 0x35	; 53
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_vid_SetPinValue+0x130>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_vid_SetPinValue+0x12c>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
			}
		}

		if( (Copy_uint8_PinNo >=DIO_uint8_PORTD_START) && (Copy_uint8_PinNo <=DIO_uint8_PORTD_END) )
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	88 31       	cpi	r24, 0x18	; 24
    1036:	88 f1       	brcs	.+98     	; 0x109a <DIO_vid_SetPinValue+0x1a2>
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	80 32       	cpi	r24, 0x20	; 32
    103c:	70 f5       	brcc	.+92     	; 0x109a <DIO_vid_SetPinValue+0x1a2>
		{
			/*Get Valid Range for PORTD pins */
			Copy_uint8_PinNo = Copy_uint8_PinNo - (DIO_uint8_PORTA_SIZE + DIO_uint8_PORTB_SIZE + DIO_uint8_PORTC_SIZE) ;
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	88 51       	subi	r24, 0x18	; 24
    1042:	89 83       	std	Y+1, r24	; 0x01
			if(Copy_uint8_Value == DIO_uint8_HIGH)
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	a1 f4       	brne	.+40     	; 0x1072 <DIO_vid_SetPinValue+0x17a>
			{
				SET_BIT(PORTD , Copy_uint8_PinNo);
    104a:	a2 e3       	ldi	r26, 0x32	; 50
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e2 e3       	ldi	r30, 0x32	; 50
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_vid_SetPinValue+0x170>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_vid_SetPinValue+0x16c>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	14 c0       	rjmp	.+40     	; 0x109a <DIO_vid_SetPinValue+0x1a2>
			}
			else
			{
					CLEAR_BIT(PORTD , Copy_uint8_PinNo);
    1072:	a2 e3       	ldi	r26, 0x32	; 50
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_vid_SetPinValue+0x198>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_vid_SetPinValue+0x194>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
			}
		}

}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <DIO_uint8_GetPinValue>:

uint8 DIO_uint8_GetPinValue(uint8 Copy_uint8_PinNo)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <DIO_uint8_GetPinValue+0x6>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_uint8Result;

		/* Find PORTA Pins                        */
		if( (Copy_uint8_PinNo >=DIO_uint8_PORTA_START) && (Copy_uint8_PinNo <=DIO_uint8_PORTA_END) )
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	88 30       	cpi	r24, 0x08	; 8
    10b4:	c0 f4       	brcc	.+48     	; 0x10e6 <DIO_uint8_GetPinValue+0x42>
		{
			/*Get Valid Range for PORTA pins */
			//Copy_uint8_PinNo = Copy_uint8_PinNo - DIO_uint8_PORTA_SIZE ;
			Local_uint8Result = GET_BIT(PINA , Copy_uint8_PinNo);
    10b6:	e9 e3       	ldi	r30, 0x39	; 57
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a9 01       	movw	r20, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_uint8_GetPinValue+0x2a>
    10ca:	55 95       	asr	r21
    10cc:	47 95       	ror	r20
    10ce:	8a 95       	dec	r24
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_uint8_GetPinValue+0x26>
    10d2:	ca 01       	movw	r24, r20
    10d4:	81 70       	andi	r24, 0x01	; 1
    10d6:	89 83       	std	Y+1, r24	; 0x01
			if(Local_uint8Result == 1)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	19 f4       	brne	.+6      	; 0x10e4 <DIO_uint8_GetPinValue+0x40>
			{
				Local_uint8Result = DIO_uint8_HIGH ;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <DIO_uint8_GetPinValue+0x42>
			}
			else
			{
				Local_uint8Result = DIO_uint8_LOW ;
    10e4:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		if( (Copy_uint8_PinNo >=DIO_uint8_PORTB_START) && (Copy_uint8_PinNo <=DIO_uint8_PORTB_END) )
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 30       	cpi	r24, 0x08	; 8
    10ea:	f0 f0       	brcs	.+60     	; 0x1128 <DIO_uint8_GetPinValue+0x84>
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	80 31       	cpi	r24, 0x10	; 16
    10f0:	d8 f4       	brcc	.+54     	; 0x1128 <DIO_uint8_GetPinValue+0x84>
		{
			/*Get Valid Range for PORTB pins */
			Copy_uint8_PinNo = Copy_uint8_PinNo - DIO_uint8_PORTA_SIZE ;
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	88 50       	subi	r24, 0x08	; 8
    10f6:	8a 83       	std	Y+2, r24	; 0x02
			Local_uint8Result = GET_BIT(PINB , Copy_uint8_PinNo);
    10f8:	e6 e3       	ldi	r30, 0x36	; 54
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_uint8_GetPinValue+0x6c>
    110c:	55 95       	asr	r21
    110e:	47 95       	ror	r20
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_uint8_GetPinValue+0x68>
    1114:	ca 01       	movw	r24, r20
    1116:	81 70       	andi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
			if(Local_uint8Result == 1)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	19 f4       	brne	.+6      	; 0x1126 <DIO_uint8_GetPinValue+0x82>
			{
				Local_uint8Result = DIO_uint8_HIGH ;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <DIO_uint8_GetPinValue+0x84>
			}
			else
			{
				Local_uint8Result = DIO_uint8_LOW ;
    1126:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		if( (Copy_uint8_PinNo >=DIO_uint8_PORTC_START) && (Copy_uint8_PinNo <=DIO_uint8_PORTC_END) )
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 31       	cpi	r24, 0x10	; 16
    112c:	f0 f0       	brcs	.+60     	; 0x116a <DIO_uint8_GetPinValue+0xc6>
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	88 31       	cpi	r24, 0x18	; 24
    1132:	d8 f4       	brcc	.+54     	; 0x116a <DIO_uint8_GetPinValue+0xc6>
		{
			/*Get Valid Range for PORTC pins */
			Copy_uint8_PinNo = Copy_uint8_PinNo - (DIO_uint8_PORTA_SIZE  + DIO_uint8_PORTB_SIZE ) ;
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	80 51       	subi	r24, 0x10	; 16
    1138:	8a 83       	std	Y+2, r24	; 0x02
			Local_uint8Result = GET_BIT(PINC , Copy_uint8_PinNo);
    113a:	e3 e3       	ldi	r30, 0x33	; 51
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a9 01       	movw	r20, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_uint8_GetPinValue+0xae>
    114e:	55 95       	asr	r21
    1150:	47 95       	ror	r20
    1152:	8a 95       	dec	r24
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_uint8_GetPinValue+0xaa>
    1156:	ca 01       	movw	r24, r20
    1158:	81 70       	andi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01
			if(Local_uint8Result == 1)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	19 f4       	brne	.+6      	; 0x1168 <DIO_uint8_GetPinValue+0xc4>
			{
				Local_uint8Result = DIO_uint8_HIGH ;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	01 c0       	rjmp	.+2      	; 0x116a <DIO_uint8_GetPinValue+0xc6>
			}
			else
			{
				Local_uint8Result = DIO_uint8_LOW ;
    1168:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		if( (Copy_uint8_PinNo >=DIO_uint8_PORTD_START) && (Copy_uint8_PinNo <=DIO_uint8_PORTD_END) )
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	88 31       	cpi	r24, 0x18	; 24
    116e:	f0 f0       	brcs	.+60     	; 0x11ac <DIO_uint8_GetPinValue+0x108>
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	80 32       	cpi	r24, 0x20	; 32
    1174:	d8 f4       	brcc	.+54     	; 0x11ac <DIO_uint8_GetPinValue+0x108>
		{
			/*Get Valid Range for PORTD pins */
			Copy_uint8_PinNo = Copy_uint8_PinNo - (DIO_uint8_PORTA_SIZE + DIO_uint8_PORTB_SIZE + DIO_uint8_PORTC_SIZE) ;
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	88 51       	subi	r24, 0x18	; 24
    117a:	8a 83       	std	Y+2, r24	; 0x02
			Local_uint8Result = GET_BIT(PIND , Copy_uint8_PinNo);
    117c:	e0 e3       	ldi	r30, 0x30	; 48
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_uint8_GetPinValue+0xf0>
    1190:	55 95       	asr	r21
    1192:	47 95       	ror	r20
    1194:	8a 95       	dec	r24
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_uint8_GetPinValue+0xec>
    1198:	ca 01       	movw	r24, r20
    119a:	81 70       	andi	r24, 0x01	; 1
    119c:	89 83       	std	Y+1, r24	; 0x01
			if(Local_uint8Result == 1)
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	19 f4       	brne	.+6      	; 0x11aa <DIO_uint8_GetPinValue+0x106>
			{
				Local_uint8Result = DIO_uint8_HIGH ;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <DIO_uint8_GetPinValue+0x108>
			}
			else
			{
				Local_uint8Result = DIO_uint8_LOW ;
    11aa:	19 82       	std	Y+1, r1	; 0x01
			}
		}

		return Local_uint8Result ;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01


}
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <__vector_1>:
void (* EXTI_CallBack) (void) ;


void __vector_1(void) __attribute__((signal , used));
void __vector_1(void)
{
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	2f 93       	push	r18
    11c4:	3f 93       	push	r19
    11c6:	4f 93       	push	r20
    11c8:	5f 93       	push	r21
    11ca:	6f 93       	push	r22
    11cc:	7f 93       	push	r23
    11ce:	8f 93       	push	r24
    11d0:	9f 93       	push	r25
    11d2:	af 93       	push	r26
    11d4:	bf 93       	push	r27
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	EXTI_CallBack() ;
    11e2:	e0 91 68 01 	lds	r30, 0x0168
    11e6:	f0 91 69 01 	lds	r31, 0x0169
    11ea:	09 95       	icall
	
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <EXTI_voidInit>:

void EXTI_voidInit(void)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
		/*Set Mode*/
		#if(EXTI_uint8_MODE == EXTI_uint8_LOW_LEVEL)
			CLEAR_BIT(MCUCR , ISC0);
			CLEAR_BIT(MCUCR , ISC1);
		#elif(EXTI_uint8_MODE == EXTI_uint8_IOC)	
			SET_BIT(MCUCR , ISC0);
    121a:	a5 e5       	ldi	r26, 0x55	; 85
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e5       	ldi	r30, 0x55	; 85
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR , ISC1);
    1228:	a5 e5       	ldi	r26, 0x55	; 85
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e5       	ldi	r30, 0x55	; 85
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8d 7f       	andi	r24, 0xFD	; 253
    1234:	8c 93       	st	X, r24
			SET_BIT(MCUCR , ISC0);
			SET_BIT(MCUCR , ISC1);
		#endif
		
		/*Disable interrupt*/
		CLEAR_BIT(GICR , EXTI_INT0);
    1236:	ab e5       	ldi	r26, 0x5B	; 91
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	eb e5       	ldi	r30, 0x5B	; 91
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8f 7b       	andi	r24, 0xBF	; 191
    1242:	8c 93       	st	X, r24
		/*Clear Flag*/
		SET_BIT(GIFR , EXTI_INT0);
    1244:	aa e5       	ldi	r26, 0x5A	; 90
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	ea e5       	ldi	r30, 0x5A	; 90
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 64       	ori	r24, 0x40	; 64
    1250:	8c 93       	st	X, r24

}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack(void (*Copy_ptr) (void))
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <EXTI_voidSetCallBack+0x6>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
	EXTI_CallBack = Copy_ptr ;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	90 93 69 01 	sts	0x0169, r25
    126e:	80 93 68 01 	sts	0x0168, r24
}
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <EXTI_voidEnable>:

void EXTI_voidEnable(void)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR , EXTI_INT0);
    1284:	ab e5       	ldi	r26, 0x5B	; 91
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	eb e5       	ldi	r30, 0x5B	; 91
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	8c 93       	st	X, r24
}
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <EXTI_voidDisable>:

void EXTI_voidDisable(void)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR , EXTI_INT0);
    12a0:	ab e5       	ldi	r26, 0x5B	; 91
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	eb e5       	ldi	r30, 0x5B	; 91
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 7b       	andi	r24, 0xBF	; 191
    12ac:	8c 93       	st	X, r24
}
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <main>:
#include "EXTI_int.h"
#include "int.h"
//#define SREG    (*((volatile uint8 *)0x5F ) )

void main ()
{
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	c9 56       	subi	r28, 0x69	; 105
    12c2:	d0 40       	sbci	r29, 0x00	; 0
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
	DIO_vid_Init();
    12ce:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_vid_Init>
	char Data_in;
	//uint8 flag;
	uint8 flag_right = 0;
    12d2:	fe 01       	movw	r30, r28
    12d4:	e9 59       	subi	r30, 0x99	; 153
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	10 82       	st	Z, r1
	uint8 flag_left = 0;
    12da:	fe 01       	movw	r30, r28
    12dc:	ea 59       	subi	r30, 0x9A	; 154
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	10 82       	st	Z, r1
	uint8 flag_start = 0;
    12e2:	fe 01       	movw	r30, r28
    12e4:	eb 59       	subi	r30, 0x9B	; 155
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	10 82       	st	Z, r1
	UART_voidInit();
    12ea:	0e 94 8c 19 	call	0x3318	; 0x3318 <UART_voidInit>
	uint8  MyPointer ;
	uint16 Analog ;
	ADC_voidInit();
    12ee:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	Timer0_vid_Init();
    12f2:	0e 94 1b 1b 	call	0x3636	; 0x3636 <Timer0_vid_Init>
//	EXTI_voidEnable();
//	DIO_vid_SetPinValue(DIO_uint8_PIN_26 , DIO_uint8_HIGH);

	while (1)
	{
		 ADC_uint8GetConversionValue(0 , &MyPointer);
    12f6:	9e 01       	movw	r18, r28
    12f8:	27 59       	subi	r18, 0x97	; 151
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	b9 01       	movw	r22, r18
    1300:	0e 94 df 06 	call	0xdbe	; 0xdbe <ADC_uint8GetConversionValue>

		 Analog = (uint16) (   (uint32)(  (uint32)MyPointer * (uint32)5000) / (uint16)256 );
    1304:	fe 01       	movw	r30, r28
    1306:	e7 59       	subi	r30, 0x97	; 151
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 81       	ld	r24, Z
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a0 e0       	ldi	r26, 0x00	; 0
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	28 e8       	ldi	r18, 0x88	; 136
    1316:	33 e1       	ldi	r19, 0x13	; 19
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	bc 01       	movw	r22, r24
    131e:	cd 01       	movw	r24, r26
    1320:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__mulsi3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	89 2f       	mov	r24, r25
    132a:	9a 2f       	mov	r25, r26
    132c:	ab 2f       	mov	r26, r27
    132e:	bb 27       	eor	r27, r27
    1330:	fe 01       	movw	r30, r28
    1332:	ed 59       	subi	r30, 0x9D	; 157
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	80 83       	st	Z, r24

		 Data_in = UART_uint8ReceiveByte();						/* receive data from Bluetooth device*/
    133a:	0e 94 01 1a 	call	0x3402	; 0x3402 <UART_uint8ReceiveByte>
    133e:	fe 01       	movw	r30, r28
    1340:	e8 59       	subi	r30, 0x98	; 152
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	80 83       	st	Z, r24

		// if (Analog == 0)
		 //{

				if(Data_in =='1')
    1346:	fe 01       	movw	r30, r28
    1348:	e8 59       	subi	r30, 0x98	; 152
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	81 33       	cpi	r24, 0x31	; 49
    1350:	49 f4       	brne	.+18     	; 0x1364 <main+0xb0>
				{
					MOTOR_Right_Clock_wise ();					/* Robot starts moving in forward direction */
    1352:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <MOTOR_Right_Clock_wise>
					MOTOR_Left_Clock_wise ();
    1356:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <MOTOR_Left_Clock_wise>

					USART_SendString("Robot Forward\n");		/* send status of Motor i.e. Motor Forward */
    135a:	80 e6       	ldi	r24, 0x60	; 96
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
    1362:	c9 cf       	rjmp	.-110    	; 0x12f6 <main+0x42>

				}
				else if(Data_in =='2')
    1364:	fe 01       	movw	r30, r28
    1366:	e8 59       	subi	r30, 0x98	; 152
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 81       	ld	r24, Z
    136c:	82 33       	cpi	r24, 0x32	; 50
    136e:	49 f4       	brne	.+18     	; 0x1382 <main+0xce>
				{
					MOTOR_Right_AntiClock_wise ();				/* Robot starts moving in Backward direction */
    1370:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <MOTOR_Right_AntiClock_wise>
					MOTOR_Left_AntiClock_wise();
    1374:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <MOTOR_Left_AntiClock_wise>

					USART_SendString("Robot Backward\n"); 		/* send status of Motor i.e. Motor Backward */
    1378:	8f e6       	ldi	r24, 0x6F	; 111
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
    1380:	ba cf       	rjmp	.-140    	; 0x12f6 <main+0x42>
				}

				else if(Data_in =='3')
    1382:	fe 01       	movw	r30, r28
    1384:	e8 59       	subi	r30, 0x98	; 152
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	80 81       	ld	r24, Z
    138a:	83 33       	cpi	r24, 0x33	; 51
    138c:	49 f4       	brne	.+18     	; 0x13a0 <main+0xec>
				{
					 MOTOR_Right_OFF ();						/* Robot OFF */
    138e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <MOTOR_Right_OFF>
					 MOTOR_Left_OFF();
    1392:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <MOTOR_Left_OFF>
					USART_SendString("Robot OFF\n"); 			/* send status of Motor i.e. Motor OFF */
    1396:	8f e7       	ldi	r24, 0x7F	; 127
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
    139e:	ab cf       	rjmp	.-170    	; 0x12f6 <main+0x42>
				}

				else if(Data_in =='4')
    13a0:	fe 01       	movw	r30, r28
    13a2:	e8 59       	subi	r30, 0x98	; 152
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	84 33       	cpi	r24, 0x34	; 52
    13aa:	49 f4       	brne	.+18     	; 0x13be <main+0x10a>
					{
					MOTOR_Right_Clock_wise ();					/* Robot starts moving in forward direction */
    13ac:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <MOTOR_Right_Clock_wise>
					MOTOR_Left_OFF();
    13b0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <MOTOR_Left_OFF>
					USART_SendString("Robot Left\n"); 			/* send status of Motor i.e. Motor OFF */
    13b4:	8a e8       	ldi	r24, 0x8A	; 138
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
    13bc:	9c cf       	rjmp	.-200    	; 0x12f6 <main+0x42>
					}

				else if(Data_in =='5')
    13be:	fe 01       	movw	r30, r28
    13c0:	e8 59       	subi	r30, 0x98	; 152
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	85 33       	cpi	r24, 0x35	; 53
    13c8:	49 f4       	brne	.+18     	; 0x13dc <main+0x128>
					{
					MOTOR_Right_OFF ();
    13ca:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <MOTOR_Right_OFF>
					MOTOR_Left_Clock_wise ();
    13ce:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <MOTOR_Left_Clock_wise>
						USART_SendString("Robot Right\n"); 			/* send status of Motor i.e. Motor OFF */
    13d2:	86 e9       	ldi	r24, 0x96	; 150
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
    13da:	8d cf       	rjmp	.-230    	; 0x12f6 <main+0x42>
					}


				else if(Data_in == '7')
    13dc:	fe 01       	movw	r30, r28
    13de:	e8 59       	subi	r30, 0x98	; 152
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 81       	ld	r24, Z
    13e4:	87 33       	cpi	r24, 0x37	; 55
    13e6:	09 f0       	breq	.+2      	; 0x13ea <main+0x136>
    13e8:	c1 c0       	rjmp	.+386    	; 0x156c <main+0x2b8>
				{
					flag_left = 1;
    13ea:	fe 01       	movw	r30, r28
    13ec:	ea 59       	subi	r30, 0x9A	; 154
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	80 83       	st	Z, r24
					USART_SendString("Scanning Left"); 					/* Send status of The Large Actuator (X-Axis) */
    13f4:	83 ea       	ldi	r24, 0xA3	; 163
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
					Stepper_vidClockWise(); 					/* The Actuator LEFT */
    13fc:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Stepper_vidClockWise>
    1400:	fe 01       	movw	r30, r28
    1402:	e1 5a       	subi	r30, 0xA1	; 161
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	aa ef       	ldi	r26, 0xFA	; 250
    140c:	b4 e4       	ldi	r27, 0x44	; 68
    140e:	80 83       	st	Z, r24
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	a2 83       	std	Z+2, r26	; 0x02
    1414:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	8e 01       	movw	r16, r28
    1418:	05 5a       	subi	r16, 0xA5	; 165
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	fe 01       	movw	r30, r28
    141e:	e1 5a       	subi	r30, 0xA1	; 161
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	60 81       	ld	r22, Z
    1424:	71 81       	ldd	r23, Z+1	; 0x01
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a ef       	ldi	r20, 0xFA	; 250
    1430:	54 e4       	ldi	r21, 0x44	; 68
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	f8 01       	movw	r30, r16
    143c:	80 83       	st	Z, r24
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	a2 83       	std	Z+2, r26	; 0x02
    1442:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1444:	fe 01       	movw	r30, r28
    1446:	e5 5a       	subi	r30, 0xA5	; 165
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e8       	ldi	r20, 0x80	; 128
    1458:	5f e3       	ldi	r21, 0x3F	; 63
    145a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    145e:	88 23       	and	r24, r24
    1460:	44 f4       	brge	.+16     	; 0x1472 <main+0x1be>
		__ticks = 1;
    1462:	fe 01       	movw	r30, r28
    1464:	e7 5a       	subi	r30, 0xA7	; 167
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	80 83       	st	Z, r24
    1470:	64 c0       	rjmp	.+200    	; 0x153a <main+0x286>
	else if (__tmp > 65535)
    1472:	fe 01       	movw	r30, r28
    1474:	e5 5a       	subi	r30, 0xA5	; 165
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	57 e4       	ldi	r21, 0x47	; 71
    1488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    148c:	18 16       	cp	r1, r24
    148e:	0c f0       	brlt	.+2      	; 0x1492 <main+0x1de>
    1490:	43 c0       	rjmp	.+134    	; 0x1518 <main+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1492:	fe 01       	movw	r30, r28
    1494:	e1 5a       	subi	r30, 0xA1	; 161
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e2       	ldi	r20, 0x20	; 32
    14a6:	51 e4       	ldi	r21, 0x41	; 65
    14a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	8e 01       	movw	r16, r28
    14b2:	07 5a       	subi	r16, 0xA7	; 167
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	f8 01       	movw	r30, r16
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
    14c8:	1f c0       	rjmp	.+62     	; 0x1508 <main+0x254>
    14ca:	fe 01       	movw	r30, r28
    14cc:	e9 5a       	subi	r30, 0xA9	; 169
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	88 ec       	ldi	r24, 0xC8	; 200
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14d8:	fe 01       	movw	r30, r28
    14da:	e9 5a       	subi	r30, 0xA9	; 169
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <main+0x22e>
    14e6:	fe 01       	movw	r30, r28
    14e8:	e9 5a       	subi	r30, 0xA9	; 169
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	de 01       	movw	r26, r28
    14f2:	a7 5a       	subi	r26, 0xA7	; 167
    14f4:	bf 4f       	sbci	r27, 0xFF	; 255
    14f6:	fe 01       	movw	r30, r28
    14f8:	e7 5a       	subi	r30, 0xA7	; 167
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	9c 93       	st	X, r25
    1506:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1508:	fe 01       	movw	r30, r28
    150a:	e7 5a       	subi	r30, 0xA7	; 167
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	d1 f6       	brne	.-76     	; 0x14ca <main+0x216>
    1516:	27 c0       	rjmp	.+78     	; 0x1566 <main+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	8e 01       	movw	r16, r28
    151a:	07 5a       	subi	r16, 0xA7	; 167
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	fe 01       	movw	r30, r28
    1520:	e5 5a       	subi	r30, 0xA5	; 165
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	60 81       	ld	r22, Z
    1526:	71 81       	ldd	r23, Z+1	; 0x01
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	f8 01       	movw	r30, r16
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    153a:	de 01       	movw	r26, r28
    153c:	ab 5a       	subi	r26, 0xAB	; 171
    153e:	bf 4f       	sbci	r27, 0xFF	; 255
    1540:	fe 01       	movw	r30, r28
    1542:	e7 5a       	subi	r30, 0xA7	; 167
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	80 81       	ld	r24, Z
    1548:	91 81       	ldd	r25, Z+1	; 0x01
    154a:	8d 93       	st	X+, r24
    154c:	9c 93       	st	X, r25
    154e:	fe 01       	movw	r30, r28
    1550:	eb 5a       	subi	r30, 0xAB	; 171
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <main+0x2a4>
    155c:	fe 01       	movw	r30, r28
    155e:	eb 5a       	subi	r30, 0xAB	; 171
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
					 _delay_ms (2000);
					Stepper_vidOFF(); 								/* Scan OFF */
    1566:	0e 94 08 16 	call	0x2c10	; 0x2c10 <Stepper_vidOFF>
    156a:	c5 ce       	rjmp	.-630    	; 0x12f6 <main+0x42>
						 EXTI_voidSetCallBack(Stop);
								 	}*/

				}

				else if(Data_in == '8')
    156c:	fe 01       	movw	r30, r28
    156e:	e8 59       	subi	r30, 0x98	; 152
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	88 33       	cpi	r24, 0x38	; 56
    1576:	09 f0       	breq	.+2      	; 0x157a <main+0x2c6>
    1578:	5c c1       	rjmp	.+696    	; 0x1832 <main+0x57e>
					{

					USART_SendString("Returning to the start"); 					/* Send status of The Large Actuator (X-Axis) */
    157a:	81 eb       	ldi	r24, 0xB1	; 177
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>

					if (flag_left == 1)
    1582:	fe 01       	movw	r30, r28
    1584:	ea 59       	subi	r30, 0x9A	; 154
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	09 f0       	breq	.+2      	; 0x1590 <main+0x2dc>
    158e:	bc c0       	rjmp	.+376    	; 0x1708 <main+0x454>
					{
						Stepper_vidCounterClockWise(); 						/* The Actuator goes to right direction */
    1590:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <Stepper_vidCounterClockWise>
    1594:	fe 01       	movw	r30, r28
    1596:	ef 5a       	subi	r30, 0xAF	; 175
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	aa ef       	ldi	r26, 0xFA	; 250
    15a0:	b4 e4       	ldi	r27, 0x44	; 68
    15a2:	80 83       	st	Z, r24
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	a2 83       	std	Z+2, r26	; 0x02
    15a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15aa:	8e 01       	movw	r16, r28
    15ac:	03 5b       	subi	r16, 0xB3	; 179
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	fe 01       	movw	r30, r28
    15b2:	ef 5a       	subi	r30, 0xAF	; 175
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	60 81       	ld	r22, Z
    15b8:	71 81       	ldd	r23, Z+1	; 0x01
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	4a ef       	ldi	r20, 0xFA	; 250
    15c4:	54 e4       	ldi	r21, 0x44	; 68
    15c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	f8 01       	movw	r30, r16
    15d0:	80 83       	st	Z, r24
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	a2 83       	std	Z+2, r26	; 0x02
    15d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d8:	fe 01       	movw	r30, r28
    15da:	e3 5b       	subi	r30, 0xB3	; 179
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	60 81       	ld	r22, Z
    15e0:	71 81       	ldd	r23, Z+1	; 0x01
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e8       	ldi	r20, 0x80	; 128
    15ec:	5f e3       	ldi	r21, 0x3F	; 63
    15ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f2:	88 23       	and	r24, r24
    15f4:	44 f4       	brge	.+16     	; 0x1606 <main+0x352>
		__ticks = 1;
    15f6:	fe 01       	movw	r30, r28
    15f8:	e5 5b       	subi	r30, 0xB5	; 181
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	80 83       	st	Z, r24
    1604:	64 c0       	rjmp	.+200    	; 0x16ce <main+0x41a>
	else if (__tmp > 65535)
    1606:	fe 01       	movw	r30, r28
    1608:	e3 5b       	subi	r30, 0xB3	; 179
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	3f ef       	ldi	r19, 0xFF	; 255
    1618:	4f e7       	ldi	r20, 0x7F	; 127
    161a:	57 e4       	ldi	r21, 0x47	; 71
    161c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1620:	18 16       	cp	r1, r24
    1622:	0c f0       	brlt	.+2      	; 0x1626 <main+0x372>
    1624:	43 c0       	rjmp	.+134    	; 0x16ac <main+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	fe 01       	movw	r30, r28
    1628:	ef 5a       	subi	r30, 0xAF	; 175
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	8e 01       	movw	r16, r28
    1646:	05 5b       	subi	r16, 0xB5	; 181
    1648:	1f 4f       	sbci	r17, 0xFF	; 255
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	f8 01       	movw	r30, r16
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
    165c:	1f c0       	rjmp	.+62     	; 0x169c <main+0x3e8>
    165e:	fe 01       	movw	r30, r28
    1660:	e7 5b       	subi	r30, 0xB7	; 183
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	88 ec       	ldi	r24, 0xC8	; 200
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	91 83       	std	Z+1, r25	; 0x01
    166a:	80 83       	st	Z, r24
    166c:	fe 01       	movw	r30, r28
    166e:	e7 5b       	subi	r30, 0xB7	; 183
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	80 81       	ld	r24, Z
    1674:	91 81       	ldd	r25, Z+1	; 0x01
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <main+0x3c2>
    167a:	fe 01       	movw	r30, r28
    167c:	e7 5b       	subi	r30, 0xB7	; 183
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1684:	de 01       	movw	r26, r28
    1686:	a5 5b       	subi	r26, 0xB5	; 181
    1688:	bf 4f       	sbci	r27, 0xFF	; 255
    168a:	fe 01       	movw	r30, r28
    168c:	e5 5b       	subi	r30, 0xB5	; 181
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	11 96       	adiw	r26, 0x01	; 1
    1698:	9c 93       	st	X, r25
    169a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	fe 01       	movw	r30, r28
    169e:	e5 5b       	subi	r30, 0xB5	; 181
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	80 81       	ld	r24, Z
    16a4:	91 81       	ldd	r25, Z+1	; 0x01
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	d1 f6       	brne	.-76     	; 0x165e <main+0x3aa>
    16aa:	27 c0       	rjmp	.+78     	; 0x16fa <main+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ac:	8e 01       	movw	r16, r28
    16ae:	05 5b       	subi	r16, 0xB5	; 181
    16b0:	1f 4f       	sbci	r17, 0xFF	; 255
    16b2:	fe 01       	movw	r30, r28
    16b4:	e3 5b       	subi	r30, 0xB3	; 179
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	f8 01       	movw	r30, r16
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
    16ce:	de 01       	movw	r26, r28
    16d0:	a9 5b       	subi	r26, 0xB9	; 185
    16d2:	bf 4f       	sbci	r27, 0xFF	; 255
    16d4:	fe 01       	movw	r30, r28
    16d6:	e5 5b       	subi	r30, 0xB5	; 181
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	8d 93       	st	X+, r24
    16e0:	9c 93       	st	X, r25
    16e2:	fe 01       	movw	r30, r28
    16e4:	e9 5b       	subi	r30, 0xB9	; 185
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <main+0x438>
    16f0:	fe 01       	movw	r30, r28
    16f2:	e9 5b       	subi	r30, 0xB9	; 185
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
						 _delay_ms (2000);
						Stepper_vidOFF(); 								/* Scan OFF */
    16fa:	0e 94 08 16 	call	0x2c10	; 0x2c10 <Stepper_vidOFF>
						flag_left = 0;
    16fe:	fe 01       	movw	r30, r28
    1700:	ea 59       	subi	r30, 0x9A	; 154
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	10 82       	st	Z, r1
    1706:	f7 cd       	rjmp	.-1042   	; 0x12f6 <main+0x42>
					}

					else if (flag_right == 1)
    1708:	fe 01       	movw	r30, r28
    170a:	e9 59       	subi	r30, 0x99	; 153
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	80 81       	ld	r24, Z
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	09 f0       	breq	.+2      	; 0x1716 <main+0x462>
    1714:	f0 cd       	rjmp	.-1056   	; 0x12f6 <main+0x42>
					{
						Stepper_vidClockWise(); 						/* The Actuator goes to LEFT direction */
    1716:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Stepper_vidClockWise>
    171a:	fe 01       	movw	r30, r28
    171c:	ed 5b       	subi	r30, 0xBD	; 189
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	aa ef       	ldi	r26, 0xFA	; 250
    1726:	b4 e4       	ldi	r27, 0x44	; 68
    1728:	80 83       	st	Z, r24
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	a2 83       	std	Z+2, r26	; 0x02
    172e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1730:	8e 01       	movw	r16, r28
    1732:	01 5c       	subi	r16, 0xC1	; 193
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	ed 5b       	subi	r30, 0xBD	; 189
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a ef       	ldi	r20, 0xFA	; 250
    174a:	54 e4       	ldi	r21, 0x44	; 68
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	f8 01       	movw	r30, r16
    1756:	80 83       	st	Z, r24
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	a2 83       	std	Z+2, r26	; 0x02
    175c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    175e:	fe 01       	movw	r30, r28
    1760:	ff 96       	adiw	r30, 0x3f	; 63
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <main+0x4d0>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9e af       	std	Y+62, r25	; 0x3e
    1780:	8d af       	std	Y+61, r24	; 0x3d
    1782:	46 c0       	rjmp	.+140    	; 0x1810 <main+0x55c>
	else if (__tmp > 65535)
    1784:	fe 01       	movw	r30, r28
    1786:	ff 96       	adiw	r30, 0x3f	; 63
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	3f ef       	ldi	r19, 0xFF	; 255
    1794:	4f e7       	ldi	r20, 0x7F	; 127
    1796:	57 e4       	ldi	r21, 0x47	; 71
    1798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    179c:	18 16       	cp	r1, r24
    179e:	64 f5       	brge	.+88     	; 0x17f8 <main+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a0:	fe 01       	movw	r30, r28
    17a2:	ed 5b       	subi	r30, 0xBD	; 189
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9e af       	std	Y+62, r25	; 0x3e
    17cc:	8d af       	std	Y+61, r24	; 0x3d
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <main+0x53a>
    17d0:	88 ec       	ldi	r24, 0xC8	; 200
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9c af       	std	Y+60, r25	; 0x3c
    17d6:	8b af       	std	Y+59, r24	; 0x3b
    17d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    17da:	9c ad       	ldd	r25, Y+60	; 0x3c
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <main+0x528>
    17e0:	9c af       	std	Y+60, r25	; 0x3c
    17e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    17e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9e af       	std	Y+62, r25	; 0x3e
    17ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    17f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <main+0x51c>
    17f6:	16 c0       	rjmp	.+44     	; 0x1824 <main+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	fe 01       	movw	r30, r28
    17fa:	ff 96       	adiw	r30, 0x3f	; 63
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9e af       	std	Y+62, r25	; 0x3e
    180e:	8d af       	std	Y+61, r24	; 0x3d
    1810:	8d ad       	ldd	r24, Y+61	; 0x3d
    1812:	9e ad       	ldd	r25, Y+62	; 0x3e
    1814:	9a af       	std	Y+58, r25	; 0x3a
    1816:	89 af       	std	Y+57, r24	; 0x39
    1818:	89 ad       	ldd	r24, Y+57	; 0x39
    181a:	9a ad       	ldd	r25, Y+58	; 0x3a
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <main+0x568>
    1820:	9a af       	std	Y+58, r25	; 0x3a
    1822:	89 af       	std	Y+57, r24	; 0x39
						 _delay_ms (2000);
						Stepper_vidOFF(); 								/* Scan OFF */
    1824:	0e 94 08 16 	call	0x2c10	; 0x2c10 <Stepper_vidOFF>
						flag_right = 0;
    1828:	fe 01       	movw	r30, r28
    182a:	e9 59       	subi	r30, 0x99	; 153
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	10 82       	st	Z, r1
    1830:	62 cd       	rjmp	.-1340   	; 0x12f6 <main+0x42>
						 EXTI_voidSetCallBack(Stop);
					 	}*/

					}

				else if(Data_in == '9')
    1832:	fe 01       	movw	r30, r28
    1834:	e8 59       	subi	r30, 0x98	; 152
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	89 33       	cpi	r24, 0x39	; 57
    183c:	71 f4       	brne	.+28     	; 0x185a <main+0x5a6>
				{
				flag_right = 1;
    183e:	fe 01       	movw	r30, r28
    1840:	e9 59       	subi	r30, 0x99	; 153
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	80 83       	st	Z, r24
				USART_SendString("Scanning Right"); 					/* Send status of The Large Actuator (X-Axis) */
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
				Stepper_vidCounterClockWise();  						/* The Actuator goes to right direction */
    1850:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <Stepper_vidCounterClockWise>
				Stepper_vidOFF(); 								/* Scan OFF */
    1854:	0e 94 08 16 	call	0x2c10	; 0x2c10 <Stepper_vidOFF>
    1858:	4e cd       	rjmp	.-1380   	; 0x12f6 <main+0x42>
					 EXTI_voidSetCallBack(Stop);
				 	}*/

				}

				else if(Data_in == 'U')
    185a:	fe 01       	movw	r30, r28
    185c:	e8 59       	subi	r30, 0x98	; 152
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	85 35       	cpi	r24, 0x55	; 85
    1864:	49 f4       	brne	.+18     	; 0x1878 <main+0x5c4>
				{
					USART_SendString("Actuator Moving Up"); 		/* Send status of The Small Actuator (Z-Axis) */
    1866:	87 ed       	ldi	r24, 0xD7	; 215
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
					StepperSmall_vidClockWise();					/* The Actuator Moves UP */
    186e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <StepperSmall_vidClockWise>
					StepperSmall_vidOFF(); 								/* OFF */
    1872:	0e 94 65 19 	call	0x32ca	; 0x32ca <StepperSmall_vidOFF>
    1876:	3f cd       	rjmp	.-1410   	; 0x12f6 <main+0x42>
				}

				else if(Data_in == 'D')
    1878:	fe 01       	movw	r30, r28
    187a:	e8 59       	subi	r30, 0x98	; 152
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 81       	ld	r24, Z
    1880:	84 34       	cpi	r24, 0x44	; 68
    1882:	49 f4       	brne	.+18     	; 0x1896 <main+0x5e2>
				{
					USART_SendString("Actuator Moving Down"); 		/* Send status of The Small Actuator (Z-Axis) */
    1884:	8a ee       	ldi	r24, 0xEA	; 234
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
					StepperSmall_vidCounterClockWise (); 						/* The Actuator Moves Down */
    188c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <StepperSmall_vidCounterClockWise>
					StepperSmall_vidOFF(); 								/* OFF */
    1890:	0e 94 65 19 	call	0x32ca	; 0x32ca <StepperSmall_vidOFF>
    1894:	30 cd       	rjmp	.-1440   	; 0x12f6 <main+0x42>
				}

				else if (Data_in =='0')
    1896:	fe 01       	movw	r30, r28
    1898:	e8 59       	subi	r30, 0x98	; 152
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	80 33       	cpi	r24, 0x30	; 48
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <main+0x5f0>
    18a2:	f1 c1       	rjmp	.+994    	; 0x1c86 <main+0x9d2>
				{

					Pump_Start();
    18a4:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Pump_Start>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e8       	ldi	r25, 0x80	; 128
    18ac:	ab e3       	ldi	r26, 0x3B	; 59
    18ae:	b5 e4       	ldi	r27, 0x45	; 69
    18b0:	8d ab       	std	Y+53, r24	; 0x35
    18b2:	9e ab       	std	Y+54, r25	; 0x36
    18b4:	af ab       	std	Y+55, r26	; 0x37
    18b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	6d a9       	ldd	r22, Y+53	; 0x35
    18ba:	7e a9       	ldd	r23, Y+54	; 0x36
    18bc:	8f a9       	ldd	r24, Y+55	; 0x37
    18be:	98 ad       	ldd	r25, Y+56	; 0x38
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a ef       	ldi	r20, 0xFA	; 250
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	89 ab       	std	Y+49, r24	; 0x31
    18d2:	9a ab       	std	Y+50, r25	; 0x32
    18d4:	ab ab       	std	Y+51, r26	; 0x33
    18d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18d8:	69 a9       	ldd	r22, Y+49	; 0x31
    18da:	7a a9       	ldd	r23, Y+50	; 0x32
    18dc:	8b a9       	ldd	r24, Y+51	; 0x33
    18de:	9c a9       	ldd	r25, Y+52	; 0x34
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <main+0x646>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	98 ab       	std	Y+48, r25	; 0x30
    18f6:	8f a7       	std	Y+47, r24	; 0x2f
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <main+0x6c4>
	else if (__tmp > 65535)
    18fa:	69 a9       	ldd	r22, Y+49	; 0x31
    18fc:	7a a9       	ldd	r23, Y+50	; 0x32
    18fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1900:	9c a9       	ldd	r25, Y+52	; 0x34
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <main+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	6d a9       	ldd	r22, Y+53	; 0x35
    1914:	7e a9       	ldd	r23, Y+54	; 0x36
    1916:	8f a9       	ldd	r24, Y+55	; 0x37
    1918:	98 ad       	ldd	r25, Y+56	; 0x38
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	98 ab       	std	Y+48, r25	; 0x30
    1938:	8f a7       	std	Y+47, r24	; 0x2f
    193a:	0f c0       	rjmp	.+30     	; 0x195a <main+0x6a6>
    193c:	88 ec       	ldi	r24, 0xC8	; 200
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9e a7       	std	Y+46, r25	; 0x2e
    1942:	8d a7       	std	Y+45, r24	; 0x2d
    1944:	8d a5       	ldd	r24, Y+45	; 0x2d
    1946:	9e a5       	ldd	r25, Y+46	; 0x2e
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <main+0x694>
    194c:	9e a7       	std	Y+46, r25	; 0x2e
    194e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	8f a5       	ldd	r24, Y+47	; 0x2f
    1952:	98 a9       	ldd	r25, Y+48	; 0x30
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	98 ab       	std	Y+48, r25	; 0x30
    1958:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	8f a5       	ldd	r24, Y+47	; 0x2f
    195c:	98 a9       	ldd	r25, Y+48	; 0x30
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <main+0x688>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <main+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	69 a9       	ldd	r22, Y+49	; 0x31
    1966:	7a a9       	ldd	r23, Y+50	; 0x32
    1968:	8b a9       	ldd	r24, Y+51	; 0x33
    196a:	9c a9       	ldd	r25, Y+52	; 0x34
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	98 ab       	std	Y+48, r25	; 0x30
    1976:	8f a7       	std	Y+47, r24	; 0x2f
    1978:	8f a5       	ldd	r24, Y+47	; 0x2f
    197a:	98 a9       	ldd	r25, Y+48	; 0x30
    197c:	9c a7       	std	Y+44, r25	; 0x2c
    197e:	8b a7       	std	Y+43, r24	; 0x2b
    1980:	8b a5       	ldd	r24, Y+43	; 0x2b
    1982:	9c a5       	ldd	r25, Y+44	; 0x2c
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <main+0x6d0>
    1988:	9c a7       	std	Y+44, r25	; 0x2c
    198a:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms (3000);
					Pump_Off();
    198c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <Pump_Off>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e8       	ldi	r25, 0x80	; 128
    1994:	ab e3       	ldi	r26, 0x3B	; 59
    1996:	b5 e4       	ldi	r27, 0x45	; 69
    1998:	8f a3       	std	Y+39, r24	; 0x27
    199a:	98 a7       	std	Y+40, r25	; 0x28
    199c:	a9 a7       	std	Y+41, r26	; 0x29
    199e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	6f a1       	ldd	r22, Y+39	; 0x27
    19a2:	78 a5       	ldd	r23, Y+40	; 0x28
    19a4:	89 a5       	ldd	r24, Y+41	; 0x29
    19a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a ef       	ldi	r20, 0xFA	; 250
    19ae:	54 e4       	ldi	r21, 0x44	; 68
    19b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8b a3       	std	Y+35, r24	; 0x23
    19ba:	9c a3       	std	Y+36, r25	; 0x24
    19bc:	ad a3       	std	Y+37, r26	; 0x25
    19be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19c0:	6b a1       	ldd	r22, Y+35	; 0x23
    19c2:	7c a1       	ldd	r23, Y+36	; 0x24
    19c4:	8d a1       	ldd	r24, Y+37	; 0x25
    19c6:	9e a1       	ldd	r25, Y+38	; 0x26
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <main+0x72e>
		__ticks = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9a a3       	std	Y+34, r25	; 0x22
    19de:	89 a3       	std	Y+33, r24	; 0x21
    19e0:	3f c0       	rjmp	.+126    	; 0x1a60 <main+0x7ac>
	else if (__tmp > 65535)
    19e2:	6b a1       	ldd	r22, Y+35	; 0x23
    19e4:	7c a1       	ldd	r23, Y+36	; 0x24
    19e6:	8d a1       	ldd	r24, Y+37	; 0x25
    19e8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f6:	18 16       	cp	r1, r24
    19f8:	4c f5       	brge	.+82     	; 0x1a4c <main+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	6f a1       	ldd	r22, Y+39	; 0x27
    19fc:	78 a5       	ldd	r23, Y+40	; 0x28
    19fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1a00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9a a3       	std	Y+34, r25	; 0x22
    1a20:	89 a3       	std	Y+33, r24	; 0x21
    1a22:	0f c0       	rjmp	.+30     	; 0x1a42 <main+0x78e>
    1a24:	88 ec       	ldi	r24, 0xC8	; 200
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	98 a3       	std	Y+32, r25	; 0x20
    1a2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <main+0x77c>
    1a34:	98 a3       	std	Y+32, r25	; 0x20
    1a36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a38:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	9a a3       	std	Y+34, r25	; 0x22
    1a40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	89 a1       	ldd	r24, Y+33	; 0x21
    1a44:	9a a1       	ldd	r25, Y+34	; 0x22
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <main+0x770>
    1a4a:	14 c0       	rjmp	.+40     	; 0x1a74 <main+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a50:	8d a1       	ldd	r24, Y+37	; 0x25
    1a52:	9e a1       	ldd	r25, Y+38	; 0x26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9a a3       	std	Y+34, r25	; 0x22
    1a5e:	89 a3       	std	Y+33, r24	; 0x21
    1a60:	89 a1       	ldd	r24, Y+33	; 0x21
    1a62:	9a a1       	ldd	r25, Y+34	; 0x22
    1a64:	9e 8f       	std	Y+30, r25	; 0x1e
    1a66:	8d 8f       	std	Y+29, r24	; 0x1d
    1a68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <main+0x7b8>
    1a70:	9e 8f       	std	Y+30, r25	; 0x1e
    1a72:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms (3000);

					if (flag_left == 1)
    1a74:	fe 01       	movw	r30, r28
    1a76:	ea 59       	subi	r30, 0x9A	; 154
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <main+0x7ce>
    1a80:	7b c0       	rjmp	.+246    	; 0x1b78 <main+0x8c4>
						{
							Stepper_vidCounterClockWise(); 						/* The Actuator goes to right direction */
    1a82:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <Stepper_vidCounterClockWise>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	aa ef       	ldi	r26, 0xFA	; 250
    1a8c:	b4 e4       	ldi	r27, 0x44	; 68
    1a8e:	89 8f       	std	Y+25, r24	; 0x19
    1a90:	9a 8f       	std	Y+26, r25	; 0x1a
    1a92:	ab 8f       	std	Y+27, r26	; 0x1b
    1a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	69 8d       	ldd	r22, Y+25	; 0x19
    1a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	4a ef       	ldi	r20, 0xFA	; 250
    1aa4:	54 e4       	ldi	r21, 0x44	; 68
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8d 8b       	std	Y+21, r24	; 0x15
    1ab0:	9e 8b       	std	Y+22, r25	; 0x16
    1ab2:	af 8b       	std	Y+23, r26	; 0x17
    1ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aba:	8f 89       	ldd	r24, Y+23	; 0x17
    1abc:	98 8d       	ldd	r25, Y+24	; 0x18
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e8       	ldi	r20, 0x80	; 128
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <main+0x824>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 8b       	std	Y+20, r25	; 0x14
    1ad4:	8b 8b       	std	Y+19, r24	; 0x13
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <main+0x8a2>
	else if (__tmp > 65535)
    1ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    1ada:	7e 89       	ldd	r23, Y+22	; 0x16
    1adc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ade:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	57 e4       	ldi	r21, 0x47	; 71
    1ae8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	4c f5       	brge	.+82     	; 0x1b42 <main+0x88e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	69 8d       	ldd	r22, Y+25	; 0x19
    1af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e2       	ldi	r20, 0x20	; 32
    1afe:	51 e4       	ldi	r21, 0x41	; 65
    1b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9c 8b       	std	Y+20, r25	; 0x14
    1b16:	8b 8b       	std	Y+19, r24	; 0x13
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <main+0x884>
    1b1a:	88 ec       	ldi	r24, 0xC8	; 200
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9a 8b       	std	Y+18, r25	; 0x12
    1b20:	89 8b       	std	Y+17, r24	; 0x11
    1b22:	89 89       	ldd	r24, Y+17	; 0x11
    1b24:	9a 89       	ldd	r25, Y+18	; 0x12
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <main+0x872>
    1b2a:	9a 8b       	std	Y+18, r25	; 0x12
    1b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b30:	9c 89       	ldd	r25, Y+20	; 0x14
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	9c 8b       	std	Y+20, r25	; 0x14
    1b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <main+0x866>
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <main+0x8b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	6d 89       	ldd	r22, Y+21	; 0x15
    1b44:	7e 89       	ldd	r23, Y+22	; 0x16
    1b46:	8f 89       	ldd	r24, Y+23	; 0x17
    1b48:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9c 8b       	std	Y+20, r25	; 0x14
    1b54:	8b 8b       	std	Y+19, r24	; 0x13
    1b56:	8b 89       	ldd	r24, Y+19	; 0x13
    1b58:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5a:	98 8b       	std	Y+16, r25	; 0x10
    1b5c:	8f 87       	std	Y+15, r24	; 0x0f
    1b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b60:	98 89       	ldd	r25, Y+16	; 0x10
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <main+0x8ae>
    1b66:	98 8b       	std	Y+16, r25	; 0x10
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms (2000);
							Stepper_vidOFF(); 								/* Scan OFF */
    1b6a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <Stepper_vidOFF>
							flag_left = 0;
    1b6e:	fe 01       	movw	r30, r28
    1b70:	ea 59       	subi	r30, 0x9A	; 154
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	10 82       	st	Z, r1
    1b76:	bf cb       	rjmp	.-2178   	; 0x12f6 <main+0x42>
						}

					else if (flag_right == 1)
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e9 59       	subi	r30, 0x99	; 153
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 81       	ld	r24, Z
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <main+0x8d2>
    1b84:	7b c0       	rjmp	.+246    	; 0x1c7c <main+0x9c8>
						{
						Stepper_vidClockWise(); 						/* The Actuator goes to right direction */
    1b86:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Stepper_vidClockWise>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	aa ef       	ldi	r26, 0xFA	; 250
    1b90:	b4 e4       	ldi	r27, 0x44	; 68
    1b92:	8b 87       	std	Y+11, r24	; 0x0b
    1b94:	9c 87       	std	Y+12, r25	; 0x0c
    1b96:	ad 87       	std	Y+13, r26	; 0x0d
    1b98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a ef       	ldi	r20, 0xFA	; 250
    1ba8:	54 e4       	ldi	r21, 0x44	; 68
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8f 83       	std	Y+7, r24	; 0x07
    1bb4:	98 87       	std	Y+8, r25	; 0x08
    1bb6:	a9 87       	std	Y+9, r26	; 0x09
    1bb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bba:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbc:	78 85       	ldd	r23, Y+8	; 0x08
    1bbe:	89 85       	ldd	r24, Y+9	; 0x09
    1bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <main+0x928>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <main+0x9a6>
	else if (__tmp > 65535)
    1bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bde:	78 85       	ldd	r23, Y+8	; 0x08
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <main+0x992>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <main+0x988>
    1c1e:	88 ec       	ldi	r24, 0xC8	; 200
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <main+0x976>
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <main+0x96a>
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <main+0x9ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	6f 81       	ldd	r22, Y+7	; 0x07
    1c48:	78 85       	ldd	r23, Y+8	; 0x08
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <main+0x9b2>
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
							 _delay_ms (2000);
							Stepper_vidOFF(); 								/* Scan OFF */
    1c6e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <Stepper_vidOFF>
							flag_right = 0;
    1c72:	fe 01       	movw	r30, r28
    1c74:	e9 59       	subi	r30, 0x99	; 153
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	10 82       	st	Z, r1
    1c7a:	3d cb       	rjmp	.-2438   	; 0x12f6 <main+0x42>
					}


				else
					USART_SendString("Select proper option\n");	/* send message for selecting proper option */
    1c7c:	8f ef       	ldi	r24, 0xFF	; 255
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
    1c84:	38 cb       	rjmp	.-2448   	; 0x12f6 <main+0x42>

				}

				else if (Data_in == 'H')
    1c86:	fe 01       	movw	r30, r28
    1c88:	e8 59       	subi	r30, 0x98	; 152
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 34       	cpi	r24, 0x48	; 72
    1c90:	41 f4       	brne	.+16     	; 0x1ca2 <main+0x9ee>
					{
						Timer0_Uint8Set_Ocr_Value(255); // For Fast and Phase
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	0e 94 0d 1b 	call	0x361a	; 0x361a <Timer0_Uint8Set_Ocr_Value>
						USART_SendString("Moving With High Speed");
    1c98:	85 e1       	ldi	r24, 0x15	; 21
    1c9a:	91 e0       	ldi	r25, 0x01	; 1
    1c9c:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
    1ca0:	2a cb       	rjmp	.-2476   	; 0x12f6 <main+0x42>
					}

				else if (Data_in == 'M')
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e8 59       	subi	r30, 0x98	; 152
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	8d 34       	cpi	r24, 0x4D	; 77
    1cac:	41 f4       	brne	.+16     	; 0x1cbe <main+0xa0a>
					{
						Timer0_Uint8Set_Ocr_Value(230); // For Fast and Phase
    1cae:	86 ee       	ldi	r24, 0xE6	; 230
    1cb0:	0e 94 0d 1b 	call	0x361a	; 0x361a <Timer0_Uint8Set_Ocr_Value>
						USART_SendString("Moving With Medium Speed");
    1cb4:	8c e2       	ldi	r24, 0x2C	; 44
    1cb6:	91 e0       	ldi	r25, 0x01	; 1
    1cb8:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
    1cbc:	1c cb       	rjmp	.-2504   	; 0x12f6 <main+0x42>
					}

				else if (Data_in == 'L')
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e8 59       	subi	r30, 0x98	; 152
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8c 34       	cpi	r24, 0x4C	; 76
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <main+0xa18>
    1cca:	15 cb       	rjmp	.-2518   	; 0x12f6 <main+0x42>
					{
						Timer0_Uint8Set_Ocr_Value(220); // For Fast and Phase
    1ccc:	8c ed       	ldi	r24, 0xDC	; 220
    1cce:	0e 94 0d 1b 	call	0x361a	; 0x361a <Timer0_Uint8Set_Ocr_Value>
						USART_SendString("Moving With Low Speed");
    1cd2:	85 e4       	ldi	r24, 0x45	; 69
    1cd4:	91 e0       	ldi	r25, 0x01	; 1
    1cd6:	0e 94 10 1a 	call	0x3420	; 0x3420 <USART_SendString>
    1cda:	0d cb       	rjmp	.-2534   	; 0x12f6 <main+0x42>

00001cdc <MOTOR_Right_Clock_wise>:
#include "MOTOR_config.h"
#include "MOTOR_priv.h"


void MOTOR_Right_Clock_wise (void)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62

	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_1 , DIO_uint8_HIGH);
    1ce4:	87 e0       	ldi	r24, 0x07	; 7
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_0 , DIO_uint8_LOW);
    1cec:	86 e0       	ldi	r24, 0x06	; 6
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>

}
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <MOTOR_Right_AntiClock_wise>:


void MOTOR_Right_AntiClock_wise (void)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62

	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_1 , DIO_uint8_LOW);
    1d02:	87 e0       	ldi	r24, 0x07	; 7
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_0 , DIO_uint8_HIGH);
    1d0a:	86 e0       	ldi	r24, 0x06	; 6
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>


}
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <MOTOR_Right_OFF>:

void MOTOR_Right_OFF (void)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62


	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_1 , DIO_uint8_LOW);
    1d20:	87 e0       	ldi	r24, 0x07	; 7
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_0 , DIO_uint8_LOW);
    1d28:	86 e0       	ldi	r24, 0x06	; 6
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>


}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <MOTOR_Right2_Clock_wise>:

void MOTOR_Right2_Clock_wise (void)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62

	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_1 , DIO_uint8_HIGH);
    1d3e:	87 e0       	ldi	r24, 0x07	; 7
    1d40:	61 e0       	ldi	r22, 0x01	; 1
    1d42:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_0 , DIO_uint8_LOW);
    1d46:	86 e0       	ldi	r24, 0x06	; 6
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>

}
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <MOTOR_Right2_AntiClock_wise>:


void MOTOR_Right2_AntiClock_wise (void)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62

	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_1 , DIO_uint8_LOW);
    1d5c:	87 e0       	ldi	r24, 0x07	; 7
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_0 , DIO_uint8_HIGH);
    1d64:	86 e0       	ldi	r24, 0x06	; 6
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>


}
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <MOTOR_Right2_OFF>:

void MOTOR_Right2_OFF (void)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62


	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_1 , DIO_uint8_LOW);
    1d7a:	87 e0       	ldi	r24, 0x07	; 7
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Right_unit8_Pin_0 , DIO_uint8_LOW);
    1d82:	86 e0       	ldi	r24, 0x06	; 6
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>


}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <MOTOR_Left_Clock_wise>:

void MOTOR_Left_Clock_wise (void)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62

	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_1, DIO_uint8_HIGH);
    1d98:	87 e1       	ldi	r24, 0x17	; 23
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_0, DIO_uint8_LOW);
    1da0:	86 e1       	ldi	r24, 0x16	; 22
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>

}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <MOTOR_Left_AntiClock_wise>:


void MOTOR_Left_AntiClock_wise (void)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62

	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_1 , DIO_uint8_LOW);
    1db6:	87 e1       	ldi	r24, 0x17	; 23
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_0 , DIO_uint8_HIGH);
    1dbe:	86 e1       	ldi	r24, 0x16	; 22
    1dc0:	61 e0       	ldi	r22, 0x01	; 1
    1dc2:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>


}
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <MOTOR_Left_OFF>:

void MOTOR_Left_OFF (void)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62


	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_1 , DIO_uint8_LOW);
    1dd4:	87 e1       	ldi	r24, 0x17	; 23
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_0 , DIO_uint8_LOW);
    1ddc:	86 e1       	ldi	r24, 0x16	; 22
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>


}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <MOTOR_Left2_Clock_wise>:
void MOTOR_Left2_Clock_wise (void)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62

	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_1, DIO_uint8_HIGH);
    1df2:	87 e1       	ldi	r24, 0x17	; 23
    1df4:	61 e0       	ldi	r22, 0x01	; 1
    1df6:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_0, DIO_uint8_LOW);
    1dfa:	86 e1       	ldi	r24, 0x16	; 22
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>

}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <MOTOR_Left2_AntiClock_wise>:


void MOTOR_Left2_AntiClock_wise (void)
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62

	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_1 , DIO_uint8_LOW);
    1e10:	87 e1       	ldi	r24, 0x17	; 23
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_0 , DIO_uint8_HIGH);
    1e18:	86 e1       	ldi	r24, 0x16	; 22
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>


}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <MOTOR_Left2_OFF>:

void MOTOR_Left2_OFF (void)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62


	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_1 , DIO_uint8_LOW);
    1e2e:	87 e1       	ldi	r24, 0x17	; 23
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (MOTOR_Left_unit8_Pin_0 , DIO_uint8_LOW);
    1e36:	86 e1       	ldi	r24, 0x16	; 22
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>


}
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <Pump_Start>:

void Pump_Start (void)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	DIO_vid_SetPinValue (Pump_Pin_1 , DIO_uint8_HIGH);
    1e4c:	8e e1       	ldi	r24, 0x1E	; 30
    1e4e:	61 e0       	ldi	r22, 0x01	; 1
    1e50:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (Pump_Pin_2 , DIO_uint8_LOW);
    1e54:	8f e1       	ldi	r24, 0x1F	; 31
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
}
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <Pump_Off>:

void Pump_Off (void)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
	DIO_vid_SetPinValue (Pump_Pin_1 , DIO_uint8_LOW);
    1e6a:	8e e1       	ldi	r24, 0x1E	; 30
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
	DIO_vid_SetPinValue (Pump_Pin_2 , DIO_uint8_LOW);
    1e72:	8f e1       	ldi	r24, 0x1F	; 31
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
}
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <Stepper_vidClockWise>:
uint16 y1;
uint16 y2;
char Data_in;

void Stepper_vidClockWise ()
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	e2 97       	sbiw	r28, 0x32	; 50
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
	uint16 x;
    y1 = 0;
    1e94:	10 92 6e 01 	sts	0x016E, r1
    1e98:	10 92 6d 01 	sts	0x016D, r1
    y2 = 0;
    1e9c:	10 92 6c 01 	sts	0x016C, r1
    1ea0:	10 92 6b 01 	sts	0x016B, r1

	DIO_vid_SetPinValue(Stepper_DirectionPin, DIO_uint8_HIGH);	/* Set the direction Pin to the right */
    1ea4:	8a e0       	ldi	r24, 0x0A	; 10
    1ea6:	61 e0       	ldi	r22, 0x01	; 1
    1ea8:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>

	for (x = 0; x < Step_Per_Revolution_Nema; x++)
    1eac:	1a aa       	std	Y+50, r1	; 0x32
    1eae:	19 aa       	std	Y+49, r1	; 0x31
    1eb0:	8f c1       	rjmp	.+798    	; 0x21d0 <Stepper_vidClockWise+0x350>
	{

		DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_HIGH);	/* Actuator rolls forward */
    1eb2:	89 e0       	ldi	r24, 0x09	; 9
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	aa ef       	ldi	r26, 0xFA	; 250
    1ec0:	b4 e4       	ldi	r27, 0x44	; 68
    1ec2:	8d a7       	std	Y+45, r24	; 0x2d
    1ec4:	9e a7       	std	Y+46, r25	; 0x2e
    1ec6:	af a7       	std	Y+47, r26	; 0x2f
    1ec8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eca:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ecc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed2:	2b ea       	ldi	r18, 0xAB	; 171
    1ed4:	3a ea       	ldi	r19, 0xAA	; 170
    1ed6:	4a e2       	ldi	r20, 0x2A	; 42
    1ed8:	50 e4       	ldi	r21, 0x40	; 64
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	89 a7       	std	Y+41, r24	; 0x29
    1ee4:	9a a7       	std	Y+42, r25	; 0x2a
    1ee6:	ab a7       	std	Y+43, r26	; 0x2b
    1ee8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1eea:	69 a5       	ldd	r22, Y+41	; 0x29
    1eec:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ef0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	1c f4       	brge	.+6      	; 0x1f08 <Stepper_vidClockWise+0x88>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	88 a7       	std	Y+40, r24	; 0x28
    1f06:	91 c0       	rjmp	.+290    	; 0x202a <Stepper_vidClockWise+0x1aa>
	else if (__tmp > 255)
    1f08:	69 a5       	ldd	r22, Y+41	; 0x29
    1f0a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	53 e4       	ldi	r21, 0x43	; 67
    1f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	0c f0       	brlt	.+2      	; 0x1f22 <Stepper_vidClockWise+0xa2>
    1f20:	7b c0       	rjmp	.+246    	; 0x2018 <Stepper_vidClockWise+0x198>
	{
		_delay_ms(__us / 1000.0);
    1f22:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f24:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f28:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a e7       	ldi	r20, 0x7A	; 122
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	8c a3       	std	Y+36, r24	; 0x24
    1f3c:	9d a3       	std	Y+37, r25	; 0x25
    1f3e:	ae a3       	std	Y+38, r26	; 0x26
    1f40:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f42:	6c a1       	ldd	r22, Y+36	; 0x24
    1f44:	7d a1       	ldd	r23, Y+37	; 0x25
    1f46:	8e a1       	ldd	r24, Y+38	; 0x26
    1f48:	9f a1       	ldd	r25, Y+39	; 0x27
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a ef       	ldi	r20, 0xFA	; 250
    1f50:	54 e4       	ldi	r21, 0x44	; 68
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	88 a3       	std	Y+32, r24	; 0x20
    1f5c:	99 a3       	std	Y+33, r25	; 0x21
    1f5e:	aa a3       	std	Y+34, r26	; 0x22
    1f60:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f62:	68 a1       	ldd	r22, Y+32	; 0x20
    1f64:	79 a1       	ldd	r23, Y+33	; 0x21
    1f66:	8a a1       	ldd	r24, Y+34	; 0x22
    1f68:	9b a1       	ldd	r25, Y+35	; 0x23
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <Stepper_vidClockWise+0x104>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f80:	8e 8f       	std	Y+30, r24	; 0x1e
    1f82:	3f c0       	rjmp	.+126    	; 0x2002 <Stepper_vidClockWise+0x182>
	else if (__tmp > 65535)
    1f84:	68 a1       	ldd	r22, Y+32	; 0x20
    1f86:	79 a1       	ldd	r23, Y+33	; 0x21
    1f88:	8a a1       	ldd	r24, Y+34	; 0x22
    1f8a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	4c f5       	brge	.+82     	; 0x1fee <Stepper_vidClockWise+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	6c a1       	ldd	r22, Y+36	; 0x24
    1f9e:	7d a1       	ldd	r23, Y+37	; 0x25
    1fa0:	8e a1       	ldd	r24, Y+38	; 0x26
    1fa2:	9f a1       	ldd	r25, Y+39	; 0x27
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e2       	ldi	r20, 0x20	; 32
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9f 8f       	std	Y+31, r25	; 0x1f
    1fc2:	8e 8f       	std	Y+30, r24	; 0x1e
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <Stepper_vidClockWise+0x164>
    1fc6:	88 ec       	ldi	r24, 0xC8	; 200
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9d 8f       	std	Y+29, r25	; 0x1d
    1fcc:	8c 8f       	std	Y+28, r24	; 0x1c
    1fce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fd0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <Stepper_vidClockWise+0x152>
    1fd6:	9d 8f       	std	Y+29, r25	; 0x1d
    1fd8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fdc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	9f 8f       	std	Y+31, r25	; 0x1f
    1fe2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <Stepper_vidClockWise+0x146>
    1fec:	24 c0       	rjmp	.+72     	; 0x2036 <Stepper_vidClockWise+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fee:	68 a1       	ldd	r22, Y+32	; 0x20
    1ff0:	79 a1       	ldd	r23, Y+33	; 0x21
    1ff2:	8a a1       	ldd	r24, Y+34	; 0x22
    1ff4:	9b a1       	ldd	r25, Y+35	; 0x23
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9f 8f       	std	Y+31, r25	; 0x1f
    2000:	8e 8f       	std	Y+30, r24	; 0x1e
    2002:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2004:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2006:	9b 8f       	std	Y+27, r25	; 0x1b
    2008:	8a 8f       	std	Y+26, r24	; 0x1a
    200a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    200c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <Stepper_vidClockWise+0x18e>
    2012:	9b 8f       	std	Y+27, r25	; 0x1b
    2014:	8a 8f       	std	Y+26, r24	; 0x1a
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <Stepper_vidClockWise+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2018:	69 a5       	ldd	r22, Y+41	; 0x29
    201a:	7a a5       	ldd	r23, Y+42	; 0x2a
    201c:	8b a5       	ldd	r24, Y+43	; 0x2b
    201e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	88 a7       	std	Y+40, r24	; 0x28
    202a:	88 a5       	ldd	r24, Y+40	; 0x28
    202c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    202e:	89 8d       	ldd	r24, Y+25	; 0x19
    2030:	8a 95       	dec	r24
    2032:	f1 f7       	brne	.-4      	; 0x2030 <Stepper_vidClockWise+0x1b0>
    2034:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us (2000);
		DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_LOW);	/* Actuator OFF */
    2036:	89 e0       	ldi	r24, 0x09	; 9
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	aa ef       	ldi	r26, 0xFA	; 250
    2044:	b4 e4       	ldi	r27, 0x44	; 68
    2046:	8d 8b       	std	Y+21, r24	; 0x15
    2048:	9e 8b       	std	Y+22, r25	; 0x16
    204a:	af 8b       	std	Y+23, r26	; 0x17
    204c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    204e:	6d 89       	ldd	r22, Y+21	; 0x15
    2050:	7e 89       	ldd	r23, Y+22	; 0x16
    2052:	8f 89       	ldd	r24, Y+23	; 0x17
    2054:	98 8d       	ldd	r25, Y+24	; 0x18
    2056:	2b ea       	ldi	r18, 0xAB	; 171
    2058:	3a ea       	ldi	r19, 0xAA	; 170
    205a:	4a e2       	ldi	r20, 0x2A	; 42
    205c:	50 e4       	ldi	r21, 0x40	; 64
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	89 8b       	std	Y+17, r24	; 0x11
    2068:	9a 8b       	std	Y+18, r25	; 0x12
    206a:	ab 8b       	std	Y+19, r26	; 0x13
    206c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    206e:	69 89       	ldd	r22, Y+17	; 0x11
    2070:	7a 89       	ldd	r23, Y+18	; 0x12
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e8       	ldi	r20, 0x80	; 128
    207c:	5f e3       	ldi	r21, 0x3F	; 63
    207e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2082:	88 23       	and	r24, r24
    2084:	1c f4       	brge	.+6      	; 0x208c <Stepper_vidClockWise+0x20c>
		__ticks = 1;
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	88 8b       	std	Y+16, r24	; 0x10
    208a:	91 c0       	rjmp	.+290    	; 0x21ae <Stepper_vidClockWise+0x32e>
	else if (__tmp > 255)
    208c:	69 89       	ldd	r22, Y+17	; 0x11
    208e:	7a 89       	ldd	r23, Y+18	; 0x12
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4f e7       	ldi	r20, 0x7F	; 127
    209a:	53 e4       	ldi	r21, 0x43	; 67
    209c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	0c f0       	brlt	.+2      	; 0x20a6 <Stepper_vidClockWise+0x226>
    20a4:	7b c0       	rjmp	.+246    	; 0x219c <Stepper_vidClockWise+0x31c>
	{
		_delay_ms(__us / 1000.0);
    20a6:	6d 89       	ldd	r22, Y+21	; 0x15
    20a8:	7e 89       	ldd	r23, Y+22	; 0x16
    20aa:	8f 89       	ldd	r24, Y+23	; 0x17
    20ac:	98 8d       	ldd	r25, Y+24	; 0x18
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a e7       	ldi	r20, 0x7A	; 122
    20b4:	54 e4       	ldi	r21, 0x44	; 68
    20b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8c 87       	std	Y+12, r24	; 0x0c
    20c0:	9d 87       	std	Y+13, r25	; 0x0d
    20c2:	ae 87       	std	Y+14, r26	; 0x0e
    20c4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    20c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    20cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a ef       	ldi	r20, 0xFA	; 250
    20d4:	54 e4       	ldi	r21, 0x44	; 68
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	88 87       	std	Y+8, r24	; 0x08
    20e0:	99 87       	std	Y+9, r25	; 0x09
    20e2:	aa 87       	std	Y+10, r26	; 0x0a
    20e4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20e6:	68 85       	ldd	r22, Y+8	; 0x08
    20e8:	79 85       	ldd	r23, Y+9	; 0x09
    20ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <Stepper_vidClockWise+0x288>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9f 83       	std	Y+7, r25	; 0x07
    2104:	8e 83       	std	Y+6, r24	; 0x06
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <Stepper_vidClockWise+0x306>
	else if (__tmp > 65535)
    2108:	68 85       	ldd	r22, Y+8	; 0x08
    210a:	79 85       	ldd	r23, Y+9	; 0x09
    210c:	8a 85       	ldd	r24, Y+10	; 0x0a
    210e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	4c f5       	brge	.+82     	; 0x2172 <Stepper_vidClockWise+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6c 85       	ldd	r22, Y+12	; 0x0c
    2122:	7d 85       	ldd	r23, Y+13	; 0x0d
    2124:	8e 85       	ldd	r24, Y+14	; 0x0e
    2126:	9f 85       	ldd	r25, Y+15	; 0x0f
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9f 83       	std	Y+7, r25	; 0x07
    2146:	8e 83       	std	Y+6, r24	; 0x06
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <Stepper_vidClockWise+0x2e8>
    214a:	88 ec       	ldi	r24, 0xC8	; 200
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9d 83       	std	Y+5, r25	; 0x05
    2150:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	9d 81       	ldd	r25, Y+5	; 0x05
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <Stepper_vidClockWise+0x2d6>
    215a:	9d 83       	std	Y+5, r25	; 0x05
    215c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	8e 81       	ldd	r24, Y+6	; 0x06
    2160:	9f 81       	ldd	r25, Y+7	; 0x07
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	9f 83       	std	Y+7, r25	; 0x07
    2166:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	8e 81       	ldd	r24, Y+6	; 0x06
    216a:	9f 81       	ldd	r25, Y+7	; 0x07
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f7       	brne	.-38     	; 0x214a <Stepper_vidClockWise+0x2ca>
    2170:	24 c0       	rjmp	.+72     	; 0x21ba <Stepper_vidClockWise+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	68 85       	ldd	r22, Y+8	; 0x08
    2174:	79 85       	ldd	r23, Y+9	; 0x09
    2176:	8a 85       	ldd	r24, Y+10	; 0x0a
    2178:	9b 85       	ldd	r25, Y+11	; 0x0b
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9f 83       	std	Y+7, r25	; 0x07
    2184:	8e 83       	std	Y+6, r24	; 0x06
    2186:	8e 81       	ldd	r24, Y+6	; 0x06
    2188:	9f 81       	ldd	r25, Y+7	; 0x07
    218a:	9b 83       	std	Y+3, r25	; 0x03
    218c:	8a 83       	std	Y+2, r24	; 0x02
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	9b 81       	ldd	r25, Y+3	; 0x03
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <Stepper_vidClockWise+0x312>
    2196:	9b 83       	std	Y+3, r25	; 0x03
    2198:	8a 83       	std	Y+2, r24	; 0x02
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <Stepper_vidClockWise+0x33a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    219c:	69 89       	ldd	r22, Y+17	; 0x11
    219e:	7a 89       	ldd	r23, Y+18	; 0x12
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	88 8b       	std	Y+16, r24	; 0x10
    21ae:	88 89       	ldd	r24, Y+16	; 0x10
    21b0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	8a 95       	dec	r24
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <Stepper_vidClockWise+0x334>
    21b8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us (2000);


		y1 = x;
    21ba:	89 a9       	ldd	r24, Y+49	; 0x31
    21bc:	9a a9       	ldd	r25, Y+50	; 0x32
    21be:	90 93 6e 01 	sts	0x016E, r25
    21c2:	80 93 6d 01 	sts	0x016D, r24
    y1 = 0;
    y2 = 0;

	DIO_vid_SetPinValue(Stepper_DirectionPin, DIO_uint8_HIGH);	/* Set the direction Pin to the right */

	for (x = 0; x < Step_Per_Revolution_Nema; x++)
    21c6:	89 a9       	ldd	r24, Y+49	; 0x31
    21c8:	9a a9       	ldd	r25, Y+50	; 0x32
    21ca:	01 96       	adiw	r24, 0x01	; 1
    21cc:	9a ab       	std	Y+50, r25	; 0x32
    21ce:	89 ab       	std	Y+49, r24	; 0x31
    21d0:	89 a9       	ldd	r24, Y+49	; 0x31
    21d2:	9a a9       	ldd	r25, Y+50	; 0x32
    21d4:	24 e0       	ldi	r18, 0x04	; 4
    21d6:	80 3b       	cpi	r24, 0xB0	; 176
    21d8:	92 07       	cpc	r25, r18
    21da:	08 f4       	brcc	.+2      	; 0x21de <Stepper_vidClockWise+0x35e>
    21dc:	6a ce       	rjmp	.-812    	; 0x1eb2 <Stepper_vidClockWise+0x32>
		y1 = x;
	}



}
    21de:	e2 96       	adiw	r28, 0x32	; 50
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <Stepper_vidCounterClockWise>:

void Stepper_vidCounterClockWise ()

{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	e2 97       	sbiw	r28, 0x32	; 50
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61

	uint16 x;
    y2 = 0;
    2204:	10 92 6c 01 	sts	0x016C, r1
    2208:	10 92 6b 01 	sts	0x016B, r1
	y1 = 0;
    220c:	10 92 6e 01 	sts	0x016E, r1
    2210:	10 92 6d 01 	sts	0x016D, r1

		DIO_vid_SetPinValue(Stepper_DirectionPin, DIO_uint8_LOW);	/* Set the direction Pin to the left */
    2214:	8a e0       	ldi	r24, 0x0A	; 10
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>

		for (x = 0; x < Step_Per_Revolution_Nema; x++)
    221c:	1a aa       	std	Y+50, r1	; 0x32
    221e:	19 aa       	std	Y+49, r1	; 0x31
    2220:	8f c1       	rjmp	.+798    	; 0x2540 <Stepper_vidCounterClockWise+0x350>
		{

			DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_HIGH);	/* Actuator rolls backward */
    2222:	89 e0       	ldi	r24, 0x09	; 9
    2224:	61 e0       	ldi	r22, 0x01	; 1
    2226:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	aa ef       	ldi	r26, 0xFA	; 250
    2230:	b4 e4       	ldi	r27, 0x44	; 68
    2232:	8d a7       	std	Y+45, r24	; 0x2d
    2234:	9e a7       	std	Y+46, r25	; 0x2e
    2236:	af a7       	std	Y+47, r26	; 0x2f
    2238:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    223a:	6d a5       	ldd	r22, Y+45	; 0x2d
    223c:	7e a5       	ldd	r23, Y+46	; 0x2e
    223e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2240:	98 a9       	ldd	r25, Y+48	; 0x30
    2242:	2b ea       	ldi	r18, 0xAB	; 171
    2244:	3a ea       	ldi	r19, 0xAA	; 170
    2246:	4a e2       	ldi	r20, 0x2A	; 42
    2248:	50 e4       	ldi	r21, 0x40	; 64
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	89 a7       	std	Y+41, r24	; 0x29
    2254:	9a a7       	std	Y+42, r25	; 0x2a
    2256:	ab a7       	std	Y+43, r26	; 0x2b
    2258:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    225a:	69 a5       	ldd	r22, Y+41	; 0x29
    225c:	7a a5       	ldd	r23, Y+42	; 0x2a
    225e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2260:	9c a5       	ldd	r25, Y+44	; 0x2c
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    226e:	88 23       	and	r24, r24
    2270:	1c f4       	brge	.+6      	; 0x2278 <Stepper_vidCounterClockWise+0x88>
		__ticks = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	88 a7       	std	Y+40, r24	; 0x28
    2276:	91 c0       	rjmp	.+290    	; 0x239a <Stepper_vidCounterClockWise+0x1aa>
	else if (__tmp > 255)
    2278:	69 a5       	ldd	r22, Y+41	; 0x29
    227a:	7a a5       	ldd	r23, Y+42	; 0x2a
    227c:	8b a5       	ldd	r24, Y+43	; 0x2b
    227e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	53 e4       	ldi	r21, 0x43	; 67
    2288:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	0c f0       	brlt	.+2      	; 0x2292 <Stepper_vidCounterClockWise+0xa2>
    2290:	7b c0       	rjmp	.+246    	; 0x2388 <Stepper_vidCounterClockWise+0x198>
	{
		_delay_ms(__us / 1000.0);
    2292:	6d a5       	ldd	r22, Y+45	; 0x2d
    2294:	7e a5       	ldd	r23, Y+46	; 0x2e
    2296:	8f a5       	ldd	r24, Y+47	; 0x2f
    2298:	98 a9       	ldd	r25, Y+48	; 0x30
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a e7       	ldi	r20, 0x7A	; 122
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8c a3       	std	Y+36, r24	; 0x24
    22ac:	9d a3       	std	Y+37, r25	; 0x25
    22ae:	ae a3       	std	Y+38, r26	; 0x26
    22b0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	6c a1       	ldd	r22, Y+36	; 0x24
    22b4:	7d a1       	ldd	r23, Y+37	; 0x25
    22b6:	8e a1       	ldd	r24, Y+38	; 0x26
    22b8:	9f a1       	ldd	r25, Y+39	; 0x27
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a ef       	ldi	r20, 0xFA	; 250
    22c0:	54 e4       	ldi	r21, 0x44	; 68
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	88 a3       	std	Y+32, r24	; 0x20
    22cc:	99 a3       	std	Y+33, r25	; 0x21
    22ce:	aa a3       	std	Y+34, r26	; 0x22
    22d0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    22d2:	68 a1       	ldd	r22, Y+32	; 0x20
    22d4:	79 a1       	ldd	r23, Y+33	; 0x21
    22d6:	8a a1       	ldd	r24, Y+34	; 0x22
    22d8:	9b a1       	ldd	r25, Y+35	; 0x23
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <Stepper_vidCounterClockWise+0x104>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9f 8f       	std	Y+31, r25	; 0x1f
    22f0:	8e 8f       	std	Y+30, r24	; 0x1e
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <Stepper_vidCounterClockWise+0x182>
	else if (__tmp > 65535)
    22f4:	68 a1       	ldd	r22, Y+32	; 0x20
    22f6:	79 a1       	ldd	r23, Y+33	; 0x21
    22f8:	8a a1       	ldd	r24, Y+34	; 0x22
    22fa:	9b a1       	ldd	r25, Y+35	; 0x23
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	4f e7       	ldi	r20, 0x7F	; 127
    2302:	57 e4       	ldi	r21, 0x47	; 71
    2304:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2308:	18 16       	cp	r1, r24
    230a:	4c f5       	brge	.+82     	; 0x235e <Stepper_vidCounterClockWise+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230c:	6c a1       	ldd	r22, Y+36	; 0x24
    230e:	7d a1       	ldd	r23, Y+37	; 0x25
    2310:	8e a1       	ldd	r24, Y+38	; 0x26
    2312:	9f a1       	ldd	r25, Y+39	; 0x27
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9f 8f       	std	Y+31, r25	; 0x1f
    2332:	8e 8f       	std	Y+30, r24	; 0x1e
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <Stepper_vidCounterClockWise+0x164>
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9d 8f       	std	Y+29, r25	; 0x1d
    233c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    233e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2340:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <Stepper_vidCounterClockWise+0x152>
    2346:	9d 8f       	std	Y+29, r25	; 0x1d
    2348:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    234c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9f 8f       	std	Y+31, r25	; 0x1f
    2352:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2356:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <Stepper_vidCounterClockWise+0x146>
    235c:	24 c0       	rjmp	.+72     	; 0x23a6 <Stepper_vidCounterClockWise+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	68 a1       	ldd	r22, Y+32	; 0x20
    2360:	79 a1       	ldd	r23, Y+33	; 0x21
    2362:	8a a1       	ldd	r24, Y+34	; 0x22
    2364:	9b a1       	ldd	r25, Y+35	; 0x23
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9f 8f       	std	Y+31, r25	; 0x1f
    2370:	8e 8f       	std	Y+30, r24	; 0x1e
    2372:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2374:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2376:	9b 8f       	std	Y+27, r25	; 0x1b
    2378:	8a 8f       	std	Y+26, r24	; 0x1a
    237a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    237c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <Stepper_vidCounterClockWise+0x18e>
    2382:	9b 8f       	std	Y+27, r25	; 0x1b
    2384:	8a 8f       	std	Y+26, r24	; 0x1a
    2386:	0f c0       	rjmp	.+30     	; 0x23a6 <Stepper_vidCounterClockWise+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2388:	69 a5       	ldd	r22, Y+41	; 0x29
    238a:	7a a5       	ldd	r23, Y+42	; 0x2a
    238c:	8b a5       	ldd	r24, Y+43	; 0x2b
    238e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	88 a7       	std	Y+40, r24	; 0x28
    239a:	88 a5       	ldd	r24, Y+40	; 0x28
    239c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    239e:	89 8d       	ldd	r24, Y+25	; 0x19
    23a0:	8a 95       	dec	r24
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <Stepper_vidCounterClockWise+0x1b0>
    23a4:	89 8f       	std	Y+25, r24	; 0x19
			_delay_us (2000);
			DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_LOW);	/* Actuator OFF */
    23a6:	89 e0       	ldi	r24, 0x09	; 9
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	aa ef       	ldi	r26, 0xFA	; 250
    23b4:	b4 e4       	ldi	r27, 0x44	; 68
    23b6:	8d 8b       	std	Y+21, r24	; 0x15
    23b8:	9e 8b       	std	Y+22, r25	; 0x16
    23ba:	af 8b       	std	Y+23, r26	; 0x17
    23bc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23be:	6d 89       	ldd	r22, Y+21	; 0x15
    23c0:	7e 89       	ldd	r23, Y+22	; 0x16
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	2b ea       	ldi	r18, 0xAB	; 171
    23c8:	3a ea       	ldi	r19, 0xAA	; 170
    23ca:	4a e2       	ldi	r20, 0x2A	; 42
    23cc:	50 e4       	ldi	r21, 0x40	; 64
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	89 8b       	std	Y+17, r24	; 0x11
    23d8:	9a 8b       	std	Y+18, r25	; 0x12
    23da:	ab 8b       	std	Y+19, r26	; 0x13
    23dc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    23de:	69 89       	ldd	r22, Y+17	; 0x11
    23e0:	7a 89       	ldd	r23, Y+18	; 0x12
    23e2:	8b 89       	ldd	r24, Y+19	; 0x13
    23e4:	9c 89       	ldd	r25, Y+20	; 0x14
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	1c f4       	brge	.+6      	; 0x23fc <Stepper_vidCounterClockWise+0x20c>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	88 8b       	std	Y+16, r24	; 0x10
    23fa:	91 c0       	rjmp	.+290    	; 0x251e <Stepper_vidCounterClockWise+0x32e>
	else if (__tmp > 255)
    23fc:	69 89       	ldd	r22, Y+17	; 0x11
    23fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2400:	8b 89       	ldd	r24, Y+19	; 0x13
    2402:	9c 89       	ldd	r25, Y+20	; 0x14
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	53 e4       	ldi	r21, 0x43	; 67
    240c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	0c f0       	brlt	.+2      	; 0x2416 <Stepper_vidCounterClockWise+0x226>
    2414:	7b c0       	rjmp	.+246    	; 0x250c <Stepper_vidCounterClockWise+0x31c>
	{
		_delay_ms(__us / 1000.0);
    2416:	6d 89       	ldd	r22, Y+21	; 0x15
    2418:	7e 89       	ldd	r23, Y+22	; 0x16
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a e7       	ldi	r20, 0x7A	; 122
    2424:	54 e4       	ldi	r21, 0x44	; 68
    2426:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8c 87       	std	Y+12, r24	; 0x0c
    2430:	9d 87       	std	Y+13, r25	; 0x0d
    2432:	ae 87       	std	Y+14, r26	; 0x0e
    2434:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	6c 85       	ldd	r22, Y+12	; 0x0c
    2438:	7d 85       	ldd	r23, Y+13	; 0x0d
    243a:	8e 85       	ldd	r24, Y+14	; 0x0e
    243c:	9f 85       	ldd	r25, Y+15	; 0x0f
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a ef       	ldi	r20, 0xFA	; 250
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	88 87       	std	Y+8, r24	; 0x08
    2450:	99 87       	std	Y+9, r25	; 0x09
    2452:	aa 87       	std	Y+10, r26	; 0x0a
    2454:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2456:	68 85       	ldd	r22, Y+8	; 0x08
    2458:	79 85       	ldd	r23, Y+9	; 0x09
    245a:	8a 85       	ldd	r24, Y+10	; 0x0a
    245c:	9b 85       	ldd	r25, Y+11	; 0x0b
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	2c f4       	brge	.+10     	; 0x2478 <Stepper_vidCounterClockWise+0x288>
		__ticks = 1;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	9f 83       	std	Y+7, r25	; 0x07
    2474:	8e 83       	std	Y+6, r24	; 0x06
    2476:	3f c0       	rjmp	.+126    	; 0x24f6 <Stepper_vidCounterClockWise+0x306>
	else if (__tmp > 65535)
    2478:	68 85       	ldd	r22, Y+8	; 0x08
    247a:	79 85       	ldd	r23, Y+9	; 0x09
    247c:	8a 85       	ldd	r24, Y+10	; 0x0a
    247e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	3f ef       	ldi	r19, 0xFF	; 255
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	57 e4       	ldi	r21, 0x47	; 71
    2488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	4c f5       	brge	.+82     	; 0x24e2 <Stepper_vidCounterClockWise+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2490:	6c 85       	ldd	r22, Y+12	; 0x0c
    2492:	7d 85       	ldd	r23, Y+13	; 0x0d
    2494:	8e 85       	ldd	r24, Y+14	; 0x0e
    2496:	9f 85       	ldd	r25, Y+15	; 0x0f
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	51 e4       	ldi	r21, 0x41	; 65
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	9f 83       	std	Y+7, r25	; 0x07
    24b6:	8e 83       	std	Y+6, r24	; 0x06
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <Stepper_vidCounterClockWise+0x2e8>
    24ba:	88 ec       	ldi	r24, 0xC8	; 200
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9d 83       	std	Y+5, r25	; 0x05
    24c0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	9d 81       	ldd	r25, Y+5	; 0x05
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <Stepper_vidCounterClockWise+0x2d6>
    24ca:	9d 83       	std	Y+5, r25	; 0x05
    24cc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ce:	8e 81       	ldd	r24, Y+6	; 0x06
    24d0:	9f 81       	ldd	r25, Y+7	; 0x07
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	9f 83       	std	Y+7, r25	; 0x07
    24d6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d8:	8e 81       	ldd	r24, Y+6	; 0x06
    24da:	9f 81       	ldd	r25, Y+7	; 0x07
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	69 f7       	brne	.-38     	; 0x24ba <Stepper_vidCounterClockWise+0x2ca>
    24e0:	24 c0       	rjmp	.+72     	; 0x252a <Stepper_vidCounterClockWise+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e2:	68 85       	ldd	r22, Y+8	; 0x08
    24e4:	79 85       	ldd	r23, Y+9	; 0x09
    24e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9f 83       	std	Y+7, r25	; 0x07
    24f4:	8e 83       	std	Y+6, r24	; 0x06
    24f6:	8e 81       	ldd	r24, Y+6	; 0x06
    24f8:	9f 81       	ldd	r25, Y+7	; 0x07
    24fa:	9b 83       	std	Y+3, r25	; 0x03
    24fc:	8a 83       	std	Y+2, r24	; 0x02
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	9b 81       	ldd	r25, Y+3	; 0x03
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <Stepper_vidCounterClockWise+0x312>
    2506:	9b 83       	std	Y+3, r25	; 0x03
    2508:	8a 83       	std	Y+2, r24	; 0x02
    250a:	0f c0       	rjmp	.+30     	; 0x252a <Stepper_vidCounterClockWise+0x33a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    250c:	69 89       	ldd	r22, Y+17	; 0x11
    250e:	7a 89       	ldd	r23, Y+18	; 0x12
    2510:	8b 89       	ldd	r24, Y+19	; 0x13
    2512:	9c 89       	ldd	r25, Y+20	; 0x14
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	88 8b       	std	Y+16, r24	; 0x10
    251e:	88 89       	ldd	r24, Y+16	; 0x10
    2520:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	8a 95       	dec	r24
    2526:	f1 f7       	brne	.-4      	; 0x2524 <Stepper_vidCounterClockWise+0x334>
    2528:	89 83       	std	Y+1, r24	; 0x01
			_delay_us (2000);


			y2 = x;
    252a:	89 a9       	ldd	r24, Y+49	; 0x31
    252c:	9a a9       	ldd	r25, Y+50	; 0x32
    252e:	90 93 6c 01 	sts	0x016C, r25
    2532:	80 93 6b 01 	sts	0x016B, r24
    y2 = 0;
	y1 = 0;

		DIO_vid_SetPinValue(Stepper_DirectionPin, DIO_uint8_LOW);	/* Set the direction Pin to the left */

		for (x = 0; x < Step_Per_Revolution_Nema; x++)
    2536:	89 a9       	ldd	r24, Y+49	; 0x31
    2538:	9a a9       	ldd	r25, Y+50	; 0x32
    253a:	01 96       	adiw	r24, 0x01	; 1
    253c:	9a ab       	std	Y+50, r25	; 0x32
    253e:	89 ab       	std	Y+49, r24	; 0x31
    2540:	89 a9       	ldd	r24, Y+49	; 0x31
    2542:	9a a9       	ldd	r25, Y+50	; 0x32
    2544:	24 e0       	ldi	r18, 0x04	; 4
    2546:	80 3b       	cpi	r24, 0xB0	; 176
    2548:	92 07       	cpc	r25, r18
    254a:	08 f4       	brcc	.+2      	; 0x254e <Stepper_vidCounterClockWise+0x35e>
    254c:	6a ce       	rjmp	.-812    	; 0x2222 <Stepper_vidCounterClockWise+0x32>


			y2 = x;
		}

}
    254e:	e2 96       	adiw	r28, 0x32	; 50
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <Stepper_vidReturnLeft>:

void Stepper_vidReturnLeft ()
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	e0 97       	sbiw	r28, 0x30	; 48
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	91 c1       	rjmp	.+802    	; 0x2898 <Stepper_vidReturnLeft+0x338>
	for (y1; y1 > 0; y1--)
	{
		DIO_vid_SetPinValue(Stepper_DirectionPin, DIO_uint8_LOW);	/* Set the direction Pin to the left */
    2576:	8a e0       	ldi	r24, 0x0A	; 10
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>

		DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_HIGH);	/* Actuator rolls backward */
    257e:	89 e0       	ldi	r24, 0x09	; 9
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	aa ef       	ldi	r26, 0xFA	; 250
    258c:	b4 e4       	ldi	r27, 0x44	; 68
    258e:	8d a7       	std	Y+45, r24	; 0x2d
    2590:	9e a7       	std	Y+46, r25	; 0x2e
    2592:	af a7       	std	Y+47, r26	; 0x2f
    2594:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2596:	6d a5       	ldd	r22, Y+45	; 0x2d
    2598:	7e a5       	ldd	r23, Y+46	; 0x2e
    259a:	8f a5       	ldd	r24, Y+47	; 0x2f
    259c:	98 a9       	ldd	r25, Y+48	; 0x30
    259e:	2b ea       	ldi	r18, 0xAB	; 171
    25a0:	3a ea       	ldi	r19, 0xAA	; 170
    25a2:	4a e2       	ldi	r20, 0x2A	; 42
    25a4:	50 e4       	ldi	r21, 0x40	; 64
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	89 a7       	std	Y+41, r24	; 0x29
    25b0:	9a a7       	std	Y+42, r25	; 0x2a
    25b2:	ab a7       	std	Y+43, r26	; 0x2b
    25b4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    25b6:	69 a5       	ldd	r22, Y+41	; 0x29
    25b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    25ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    25bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e8       	ldi	r20, 0x80	; 128
    25c4:	5f e3       	ldi	r21, 0x3F	; 63
    25c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ca:	88 23       	and	r24, r24
    25cc:	1c f4       	brge	.+6      	; 0x25d4 <Stepper_vidReturnLeft+0x74>
		__ticks = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	88 a7       	std	Y+40, r24	; 0x28
    25d2:	91 c0       	rjmp	.+290    	; 0x26f6 <Stepper_vidReturnLeft+0x196>
	else if (__tmp > 255)
    25d4:	69 a5       	ldd	r22, Y+41	; 0x29
    25d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    25d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25da:	9c a5       	ldd	r25, Y+44	; 0x2c
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	53 e4       	ldi	r21, 0x43	; 67
    25e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	0c f0       	brlt	.+2      	; 0x25ee <Stepper_vidReturnLeft+0x8e>
    25ec:	7b c0       	rjmp	.+246    	; 0x26e4 <Stepper_vidReturnLeft+0x184>
	{
		_delay_ms(__us / 1000.0);
    25ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    25f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    25f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f4:	98 a9       	ldd	r25, Y+48	; 0x30
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a e7       	ldi	r20, 0x7A	; 122
    25fc:	54 e4       	ldi	r21, 0x44	; 68
    25fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	8c a3       	std	Y+36, r24	; 0x24
    2608:	9d a3       	std	Y+37, r25	; 0x25
    260a:	ae a3       	std	Y+38, r26	; 0x26
    260c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260e:	6c a1       	ldd	r22, Y+36	; 0x24
    2610:	7d a1       	ldd	r23, Y+37	; 0x25
    2612:	8e a1       	ldd	r24, Y+38	; 0x26
    2614:	9f a1       	ldd	r25, Y+39	; 0x27
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4a ef       	ldi	r20, 0xFA	; 250
    261c:	54 e4       	ldi	r21, 0x44	; 68
    261e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	88 a3       	std	Y+32, r24	; 0x20
    2628:	99 a3       	std	Y+33, r25	; 0x21
    262a:	aa a3       	std	Y+34, r26	; 0x22
    262c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    262e:	68 a1       	ldd	r22, Y+32	; 0x20
    2630:	79 a1       	ldd	r23, Y+33	; 0x21
    2632:	8a a1       	ldd	r24, Y+34	; 0x22
    2634:	9b a1       	ldd	r25, Y+35	; 0x23
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	2c f4       	brge	.+10     	; 0x2650 <Stepper_vidReturnLeft+0xf0>
		__ticks = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9f 8f       	std	Y+31, r25	; 0x1f
    264c:	8e 8f       	std	Y+30, r24	; 0x1e
    264e:	3f c0       	rjmp	.+126    	; 0x26ce <Stepper_vidReturnLeft+0x16e>
	else if (__tmp > 65535)
    2650:	68 a1       	ldd	r22, Y+32	; 0x20
    2652:	79 a1       	ldd	r23, Y+33	; 0x21
    2654:	8a a1       	ldd	r24, Y+34	; 0x22
    2656:	9b a1       	ldd	r25, Y+35	; 0x23
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	57 e4       	ldi	r21, 0x47	; 71
    2660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	4c f5       	brge	.+82     	; 0x26ba <Stepper_vidReturnLeft+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2668:	6c a1       	ldd	r22, Y+36	; 0x24
    266a:	7d a1       	ldd	r23, Y+37	; 0x25
    266c:	8e a1       	ldd	r24, Y+38	; 0x26
    266e:	9f a1       	ldd	r25, Y+39	; 0x27
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e2       	ldi	r20, 0x20	; 32
    2676:	51 e4       	ldi	r21, 0x41	; 65
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	9f 8f       	std	Y+31, r25	; 0x1f
    268e:	8e 8f       	std	Y+30, r24	; 0x1e
    2690:	0f c0       	rjmp	.+30     	; 0x26b0 <Stepper_vidReturnLeft+0x150>
    2692:	88 ec       	ldi	r24, 0xC8	; 200
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	9d 8f       	std	Y+29, r25	; 0x1d
    2698:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    269a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    269c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <Stepper_vidReturnLeft+0x13e>
    26a2:	9d 8f       	std	Y+29, r25	; 0x1d
    26a4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	9f 8f       	std	Y+31, r25	; 0x1f
    26ae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	69 f7       	brne	.-38     	; 0x2692 <Stepper_vidReturnLeft+0x132>
    26b8:	24 c0       	rjmp	.+72     	; 0x2702 <Stepper_vidReturnLeft+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ba:	68 a1       	ldd	r22, Y+32	; 0x20
    26bc:	79 a1       	ldd	r23, Y+33	; 0x21
    26be:	8a a1       	ldd	r24, Y+34	; 0x22
    26c0:	9b a1       	ldd	r25, Y+35	; 0x23
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9f 8f       	std	Y+31, r25	; 0x1f
    26cc:	8e 8f       	std	Y+30, r24	; 0x1e
    26ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26d2:	9b 8f       	std	Y+27, r25	; 0x1b
    26d4:	8a 8f       	std	Y+26, r24	; 0x1a
    26d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <Stepper_vidReturnLeft+0x17a>
    26de:	9b 8f       	std	Y+27, r25	; 0x1b
    26e0:	8a 8f       	std	Y+26, r24	; 0x1a
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <Stepper_vidReturnLeft+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26e4:	69 a5       	ldd	r22, Y+41	; 0x29
    26e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    26e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	88 a7       	std	Y+40, r24	; 0x28
    26f6:	88 a5       	ldd	r24, Y+40	; 0x28
    26f8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26fa:	89 8d       	ldd	r24, Y+25	; 0x19
    26fc:	8a 95       	dec	r24
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <Stepper_vidReturnLeft+0x19c>
    2700:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us (2000);
		DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_LOW);	/* Actuator OFF */
    2702:	89 e0       	ldi	r24, 0x09	; 9
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	aa ef       	ldi	r26, 0xFA	; 250
    2710:	b4 e4       	ldi	r27, 0x44	; 68
    2712:	8d 8b       	std	Y+21, r24	; 0x15
    2714:	9e 8b       	std	Y+22, r25	; 0x16
    2716:	af 8b       	std	Y+23, r26	; 0x17
    2718:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    271a:	6d 89       	ldd	r22, Y+21	; 0x15
    271c:	7e 89       	ldd	r23, Y+22	; 0x16
    271e:	8f 89       	ldd	r24, Y+23	; 0x17
    2720:	98 8d       	ldd	r25, Y+24	; 0x18
    2722:	2b ea       	ldi	r18, 0xAB	; 171
    2724:	3a ea       	ldi	r19, 0xAA	; 170
    2726:	4a e2       	ldi	r20, 0x2A	; 42
    2728:	50 e4       	ldi	r21, 0x40	; 64
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	89 8b       	std	Y+17, r24	; 0x11
    2734:	9a 8b       	std	Y+18, r25	; 0x12
    2736:	ab 8b       	std	Y+19, r26	; 0x13
    2738:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    273a:	69 89       	ldd	r22, Y+17	; 0x11
    273c:	7a 89       	ldd	r23, Y+18	; 0x12
    273e:	8b 89       	ldd	r24, Y+19	; 0x13
    2740:	9c 89       	ldd	r25, Y+20	; 0x14
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	1c f4       	brge	.+6      	; 0x2758 <Stepper_vidReturnLeft+0x1f8>
		__ticks = 1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	88 8b       	std	Y+16, r24	; 0x10
    2756:	91 c0       	rjmp	.+290    	; 0x287a <Stepper_vidReturnLeft+0x31a>
	else if (__tmp > 255)
    2758:	69 89       	ldd	r22, Y+17	; 0x11
    275a:	7a 89       	ldd	r23, Y+18	; 0x12
    275c:	8b 89       	ldd	r24, Y+19	; 0x13
    275e:	9c 89       	ldd	r25, Y+20	; 0x14
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4f e7       	ldi	r20, 0x7F	; 127
    2766:	53 e4       	ldi	r21, 0x43	; 67
    2768:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276c:	18 16       	cp	r1, r24
    276e:	0c f0       	brlt	.+2      	; 0x2772 <Stepper_vidReturnLeft+0x212>
    2770:	7b c0       	rjmp	.+246    	; 0x2868 <Stepper_vidReturnLeft+0x308>
	{
		_delay_ms(__us / 1000.0);
    2772:	6d 89       	ldd	r22, Y+21	; 0x15
    2774:	7e 89       	ldd	r23, Y+22	; 0x16
    2776:	8f 89       	ldd	r24, Y+23	; 0x17
    2778:	98 8d       	ldd	r25, Y+24	; 0x18
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a e7       	ldi	r20, 0x7A	; 122
    2780:	54 e4       	ldi	r21, 0x44	; 68
    2782:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8c 87       	std	Y+12, r24	; 0x0c
    278c:	9d 87       	std	Y+13, r25	; 0x0d
    278e:	ae 87       	std	Y+14, r26	; 0x0e
    2790:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2792:	6c 85       	ldd	r22, Y+12	; 0x0c
    2794:	7d 85       	ldd	r23, Y+13	; 0x0d
    2796:	8e 85       	ldd	r24, Y+14	; 0x0e
    2798:	9f 85       	ldd	r25, Y+15	; 0x0f
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a ef       	ldi	r20, 0xFA	; 250
    27a0:	54 e4       	ldi	r21, 0x44	; 68
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	88 87       	std	Y+8, r24	; 0x08
    27ac:	99 87       	std	Y+9, r25	; 0x09
    27ae:	aa 87       	std	Y+10, r26	; 0x0a
    27b0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27b2:	68 85       	ldd	r22, Y+8	; 0x08
    27b4:	79 85       	ldd	r23, Y+9	; 0x09
    27b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e8       	ldi	r20, 0x80	; 128
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <Stepper_vidReturnLeft+0x274>
		__ticks = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9f 83       	std	Y+7, r25	; 0x07
    27d0:	8e 83       	std	Y+6, r24	; 0x06
    27d2:	3f c0       	rjmp	.+126    	; 0x2852 <Stepper_vidReturnLeft+0x2f2>
	else if (__tmp > 65535)
    27d4:	68 85       	ldd	r22, Y+8	; 0x08
    27d6:	79 85       	ldd	r23, Y+9	; 0x09
    27d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27da:	9b 85       	ldd	r25, Y+11	; 0x0b
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	57 e4       	ldi	r21, 0x47	; 71
    27e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	4c f5       	brge	.+82     	; 0x283e <Stepper_vidReturnLeft+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    27ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    27f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    27f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e2       	ldi	r20, 0x20	; 32
    27fa:	51 e4       	ldi	r21, 0x41	; 65
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9f 83       	std	Y+7, r25	; 0x07
    2812:	8e 83       	std	Y+6, r24	; 0x06
    2814:	0f c0       	rjmp	.+30     	; 0x2834 <Stepper_vidReturnLeft+0x2d4>
    2816:	88 ec       	ldi	r24, 0xC8	; 200
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	9d 83       	std	Y+5, r25	; 0x05
    281c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    281e:	8c 81       	ldd	r24, Y+4	; 0x04
    2820:	9d 81       	ldd	r25, Y+5	; 0x05
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <Stepper_vidReturnLeft+0x2c2>
    2826:	9d 83       	std	Y+5, r25	; 0x05
    2828:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282a:	8e 81       	ldd	r24, Y+6	; 0x06
    282c:	9f 81       	ldd	r25, Y+7	; 0x07
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	9f 83       	std	Y+7, r25	; 0x07
    2832:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	8e 81       	ldd	r24, Y+6	; 0x06
    2836:	9f 81       	ldd	r25, Y+7	; 0x07
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	69 f7       	brne	.-38     	; 0x2816 <Stepper_vidReturnLeft+0x2b6>
    283c:	24 c0       	rjmp	.+72     	; 0x2886 <Stepper_vidReturnLeft+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	68 85       	ldd	r22, Y+8	; 0x08
    2840:	79 85       	ldd	r23, Y+9	; 0x09
    2842:	8a 85       	ldd	r24, Y+10	; 0x0a
    2844:	9b 85       	ldd	r25, Y+11	; 0x0b
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9f 83       	std	Y+7, r25	; 0x07
    2850:	8e 83       	std	Y+6, r24	; 0x06
    2852:	8e 81       	ldd	r24, Y+6	; 0x06
    2854:	9f 81       	ldd	r25, Y+7	; 0x07
    2856:	9b 83       	std	Y+3, r25	; 0x03
    2858:	8a 83       	std	Y+2, r24	; 0x02
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	9b 81       	ldd	r25, Y+3	; 0x03
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <Stepper_vidReturnLeft+0x2fe>
    2862:	9b 83       	std	Y+3, r25	; 0x03
    2864:	8a 83       	std	Y+2, r24	; 0x02
    2866:	0f c0       	rjmp	.+30     	; 0x2886 <Stepper_vidReturnLeft+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2868:	69 89       	ldd	r22, Y+17	; 0x11
    286a:	7a 89       	ldd	r23, Y+18	; 0x12
    286c:	8b 89       	ldd	r24, Y+19	; 0x13
    286e:	9c 89       	ldd	r25, Y+20	; 0x14
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	88 8b       	std	Y+16, r24	; 0x10
    287a:	88 89       	ldd	r24, Y+16	; 0x10
    287c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	8a 95       	dec	r24
    2882:	f1 f7       	brne	.-4      	; 0x2880 <Stepper_vidReturnLeft+0x320>
    2884:	89 83       	std	Y+1, r24	; 0x01

}

void Stepper_vidReturnLeft ()
{
	for (y1; y1 > 0; y1--)
    2886:	80 91 6d 01 	lds	r24, 0x016D
    288a:	90 91 6e 01 	lds	r25, 0x016E
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	90 93 6e 01 	sts	0x016E, r25
    2894:	80 93 6d 01 	sts	0x016D, r24
    2898:	80 91 6d 01 	lds	r24, 0x016D
    289c:	90 91 6e 01 	lds	r25, 0x016E
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <Stepper_vidReturnLeft+0x346>
    28a4:	68 ce       	rjmp	.-816    	; 0x2576 <Stepper_vidReturnLeft+0x16>
		_delay_us (2000);
		DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_LOW);	/* Actuator OFF */
		_delay_us (2000);
	}

}
    28a6:	e0 96       	adiw	r28, 0x30	; 48
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <Stepper_vidReturnRight>:

void Stepper_vidReturnRight ()
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	e0 97       	sbiw	r28, 0x30	; 48
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
	DIO_vid_SetPinValue(Stepper_DirectionPin, DIO_uint8_HIGH);	/* Set the direction Pin to the right */
    28cc:	8a e0       	ldi	r24, 0x0A	; 10
    28ce:	61 e0       	ldi	r22, 0x01	; 1
    28d0:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    28d4:	8d c1       	rjmp	.+794    	; 0x2bf0 <Stepper_vidReturnRight+0x338>

	for (y2; y2 > 0; y2--)
	{
		DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_HIGH);	/* Actuator rolls forward */
    28d6:	89 e0       	ldi	r24, 0x09	; 9
    28d8:	61 e0       	ldi	r22, 0x01	; 1
    28da:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	aa ef       	ldi	r26, 0xFA	; 250
    28e4:	b4 e4       	ldi	r27, 0x44	; 68
    28e6:	8d a7       	std	Y+45, r24	; 0x2d
    28e8:	9e a7       	std	Y+46, r25	; 0x2e
    28ea:	af a7       	std	Y+47, r26	; 0x2f
    28ec:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    28f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    28f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f4:	98 a9       	ldd	r25, Y+48	; 0x30
    28f6:	2b ea       	ldi	r18, 0xAB	; 171
    28f8:	3a ea       	ldi	r19, 0xAA	; 170
    28fa:	4a e2       	ldi	r20, 0x2A	; 42
    28fc:	50 e4       	ldi	r21, 0x40	; 64
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	89 a7       	std	Y+41, r24	; 0x29
    2908:	9a a7       	std	Y+42, r25	; 0x2a
    290a:	ab a7       	std	Y+43, r26	; 0x2b
    290c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    290e:	69 a5       	ldd	r22, Y+41	; 0x29
    2910:	7a a5       	ldd	r23, Y+42	; 0x2a
    2912:	8b a5       	ldd	r24, Y+43	; 0x2b
    2914:	9c a5       	ldd	r25, Y+44	; 0x2c
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e8       	ldi	r20, 0x80	; 128
    291c:	5f e3       	ldi	r21, 0x3F	; 63
    291e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2922:	88 23       	and	r24, r24
    2924:	1c f4       	brge	.+6      	; 0x292c <Stepper_vidReturnRight+0x74>
		__ticks = 1;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	88 a7       	std	Y+40, r24	; 0x28
    292a:	91 c0       	rjmp	.+290    	; 0x2a4e <Stepper_vidReturnRight+0x196>
	else if (__tmp > 255)
    292c:	69 a5       	ldd	r22, Y+41	; 0x29
    292e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2930:	8b a5       	ldd	r24, Y+43	; 0x2b
    2932:	9c a5       	ldd	r25, Y+44	; 0x2c
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	4f e7       	ldi	r20, 0x7F	; 127
    293a:	53 e4       	ldi	r21, 0x43	; 67
    293c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2940:	18 16       	cp	r1, r24
    2942:	0c f0       	brlt	.+2      	; 0x2946 <Stepper_vidReturnRight+0x8e>
    2944:	7b c0       	rjmp	.+246    	; 0x2a3c <Stepper_vidReturnRight+0x184>
	{
		_delay_ms(__us / 1000.0);
    2946:	6d a5       	ldd	r22, Y+45	; 0x2d
    2948:	7e a5       	ldd	r23, Y+46	; 0x2e
    294a:	8f a5       	ldd	r24, Y+47	; 0x2f
    294c:	98 a9       	ldd	r25, Y+48	; 0x30
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4a e7       	ldi	r20, 0x7A	; 122
    2954:	54 e4       	ldi	r21, 0x44	; 68
    2956:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8c a3       	std	Y+36, r24	; 0x24
    2960:	9d a3       	std	Y+37, r25	; 0x25
    2962:	ae a3       	std	Y+38, r26	; 0x26
    2964:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2966:	6c a1       	ldd	r22, Y+36	; 0x24
    2968:	7d a1       	ldd	r23, Y+37	; 0x25
    296a:	8e a1       	ldd	r24, Y+38	; 0x26
    296c:	9f a1       	ldd	r25, Y+39	; 0x27
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	4a ef       	ldi	r20, 0xFA	; 250
    2974:	54 e4       	ldi	r21, 0x44	; 68
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	88 a3       	std	Y+32, r24	; 0x20
    2980:	99 a3       	std	Y+33, r25	; 0x21
    2982:	aa a3       	std	Y+34, r26	; 0x22
    2984:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2986:	68 a1       	ldd	r22, Y+32	; 0x20
    2988:	79 a1       	ldd	r23, Y+33	; 0x21
    298a:	8a a1       	ldd	r24, Y+34	; 0x22
    298c:	9b a1       	ldd	r25, Y+35	; 0x23
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e8       	ldi	r20, 0x80	; 128
    2994:	5f e3       	ldi	r21, 0x3F	; 63
    2996:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    299a:	88 23       	and	r24, r24
    299c:	2c f4       	brge	.+10     	; 0x29a8 <Stepper_vidReturnRight+0xf0>
		__ticks = 1;
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9f 8f       	std	Y+31, r25	; 0x1f
    29a4:	8e 8f       	std	Y+30, r24	; 0x1e
    29a6:	3f c0       	rjmp	.+126    	; 0x2a26 <Stepper_vidReturnRight+0x16e>
	else if (__tmp > 65535)
    29a8:	68 a1       	ldd	r22, Y+32	; 0x20
    29aa:	79 a1       	ldd	r23, Y+33	; 0x21
    29ac:	8a a1       	ldd	r24, Y+34	; 0x22
    29ae:	9b a1       	ldd	r25, Y+35	; 0x23
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	3f ef       	ldi	r19, 0xFF	; 255
    29b4:	4f e7       	ldi	r20, 0x7F	; 127
    29b6:	57 e4       	ldi	r21, 0x47	; 71
    29b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29bc:	18 16       	cp	r1, r24
    29be:	4c f5       	brge	.+82     	; 0x2a12 <Stepper_vidReturnRight+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c0:	6c a1       	ldd	r22, Y+36	; 0x24
    29c2:	7d a1       	ldd	r23, Y+37	; 0x25
    29c4:	8e a1       	ldd	r24, Y+38	; 0x26
    29c6:	9f a1       	ldd	r25, Y+39	; 0x27
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e2       	ldi	r20, 0x20	; 32
    29ce:	51 e4       	ldi	r21, 0x41	; 65
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	bc 01       	movw	r22, r24
    29da:	cd 01       	movw	r24, r26
    29dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9f 8f       	std	Y+31, r25	; 0x1f
    29e6:	8e 8f       	std	Y+30, r24	; 0x1e
    29e8:	0f c0       	rjmp	.+30     	; 0x2a08 <Stepper_vidReturnRight+0x150>
    29ea:	88 ec       	ldi	r24, 0xC8	; 200
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9d 8f       	std	Y+29, r25	; 0x1d
    29f0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <Stepper_vidReturnRight+0x13e>
    29fa:	9d 8f       	std	Y+29, r25	; 0x1d
    29fc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	9f 8f       	std	Y+31, r25	; 0x1f
    2a06:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a0a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	69 f7       	brne	.-38     	; 0x29ea <Stepper_vidReturnRight+0x132>
    2a10:	24 c0       	rjmp	.+72     	; 0x2a5a <Stepper_vidReturnRight+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a12:	68 a1       	ldd	r22, Y+32	; 0x20
    2a14:	79 a1       	ldd	r23, Y+33	; 0x21
    2a16:	8a a1       	ldd	r24, Y+34	; 0x22
    2a18:	9b a1       	ldd	r25, Y+35	; 0x23
    2a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9f 8f       	std	Y+31, r25	; 0x1f
    2a24:	8e 8f       	std	Y+30, r24	; 0x1e
    2a26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a2a:	9b 8f       	std	Y+27, r25	; 0x1b
    2a2c:	8a 8f       	std	Y+26, r24	; 0x1a
    2a2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a30:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <Stepper_vidReturnRight+0x17a>
    2a36:	9b 8f       	std	Y+27, r25	; 0x1b
    2a38:	8a 8f       	std	Y+26, r24	; 0x1a
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <Stepper_vidReturnRight+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a3c:	69 a5       	ldd	r22, Y+41	; 0x29
    2a3e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a40:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a42:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	88 a7       	std	Y+40, r24	; 0x28
    2a4e:	88 a5       	ldd	r24, Y+40	; 0x28
    2a50:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a52:	89 8d       	ldd	r24, Y+25	; 0x19
    2a54:	8a 95       	dec	r24
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <Stepper_vidReturnRight+0x19c>
    2a58:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us (2000);
		DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_LOW);	/* Actuator OFF */
    2a5a:	89 e0       	ldi	r24, 0x09	; 9
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	aa ef       	ldi	r26, 0xFA	; 250
    2a68:	b4 e4       	ldi	r27, 0x44	; 68
    2a6a:	8d 8b       	std	Y+21, r24	; 0x15
    2a6c:	9e 8b       	std	Y+22, r25	; 0x16
    2a6e:	af 8b       	std	Y+23, r26	; 0x17
    2a70:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a72:	6d 89       	ldd	r22, Y+21	; 0x15
    2a74:	7e 89       	ldd	r23, Y+22	; 0x16
    2a76:	8f 89       	ldd	r24, Y+23	; 0x17
    2a78:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7a:	2b ea       	ldi	r18, 0xAB	; 171
    2a7c:	3a ea       	ldi	r19, 0xAA	; 170
    2a7e:	4a e2       	ldi	r20, 0x2A	; 42
    2a80:	50 e4       	ldi	r21, 0x40	; 64
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	89 8b       	std	Y+17, r24	; 0x11
    2a8c:	9a 8b       	std	Y+18, r25	; 0x12
    2a8e:	ab 8b       	std	Y+19, r26	; 0x13
    2a90:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a92:	69 89       	ldd	r22, Y+17	; 0x11
    2a94:	7a 89       	ldd	r23, Y+18	; 0x12
    2a96:	8b 89       	ldd	r24, Y+19	; 0x13
    2a98:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e8       	ldi	r20, 0x80	; 128
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa6:	88 23       	and	r24, r24
    2aa8:	1c f4       	brge	.+6      	; 0x2ab0 <Stepper_vidReturnRight+0x1f8>
		__ticks = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	88 8b       	std	Y+16, r24	; 0x10
    2aae:	91 c0       	rjmp	.+290    	; 0x2bd2 <Stepper_vidReturnRight+0x31a>
	else if (__tmp > 255)
    2ab0:	69 89       	ldd	r22, Y+17	; 0x11
    2ab2:	7a 89       	ldd	r23, Y+18	; 0x12
    2ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	53 e4       	ldi	r21, 0x43	; 67
    2ac0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	0c f0       	brlt	.+2      	; 0x2aca <Stepper_vidReturnRight+0x212>
    2ac8:	7b c0       	rjmp	.+246    	; 0x2bc0 <Stepper_vidReturnRight+0x308>
	{
		_delay_ms(__us / 1000.0);
    2aca:	6d 89       	ldd	r22, Y+21	; 0x15
    2acc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ace:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	4a e7       	ldi	r20, 0x7A	; 122
    2ad8:	54 e4       	ldi	r21, 0x44	; 68
    2ada:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8c 87       	std	Y+12, r24	; 0x0c
    2ae4:	9d 87       	std	Y+13, r25	; 0x0d
    2ae6:	ae 87       	std	Y+14, r26	; 0x0e
    2ae8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aea:	6c 85       	ldd	r22, Y+12	; 0x0c
    2aec:	7d 85       	ldd	r23, Y+13	; 0x0d
    2aee:	8e 85       	ldd	r24, Y+14	; 0x0e
    2af0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	4a ef       	ldi	r20, 0xFA	; 250
    2af8:	54 e4       	ldi	r21, 0x44	; 68
    2afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	88 87       	std	Y+8, r24	; 0x08
    2b04:	99 87       	std	Y+9, r25	; 0x09
    2b06:	aa 87       	std	Y+10, r26	; 0x0a
    2b08:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b0a:	68 85       	ldd	r22, Y+8	; 0x08
    2b0c:	79 85       	ldd	r23, Y+9	; 0x09
    2b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e8       	ldi	r20, 0x80	; 128
    2b18:	5f e3       	ldi	r21, 0x3F	; 63
    2b1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b1e:	88 23       	and	r24, r24
    2b20:	2c f4       	brge	.+10     	; 0x2b2c <Stepper_vidReturnRight+0x274>
		__ticks = 1;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	9f 83       	std	Y+7, r25	; 0x07
    2b28:	8e 83       	std	Y+6, r24	; 0x06
    2b2a:	3f c0       	rjmp	.+126    	; 0x2baa <Stepper_vidReturnRight+0x2f2>
	else if (__tmp > 65535)
    2b2c:	68 85       	ldd	r22, Y+8	; 0x08
    2b2e:	79 85       	ldd	r23, Y+9	; 0x09
    2b30:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b32:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	3f ef       	ldi	r19, 0xFF	; 255
    2b38:	4f e7       	ldi	r20, 0x7F	; 127
    2b3a:	57 e4       	ldi	r21, 0x47	; 71
    2b3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b40:	18 16       	cp	r1, r24
    2b42:	4c f5       	brge	.+82     	; 0x2b96 <Stepper_vidReturnRight+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b44:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b46:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b48:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e2       	ldi	r20, 0x20	; 32
    2b52:	51 e4       	ldi	r21, 0x41	; 65
    2b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	9f 83       	std	Y+7, r25	; 0x07
    2b6a:	8e 83       	std	Y+6, r24	; 0x06
    2b6c:	0f c0       	rjmp	.+30     	; 0x2b8c <Stepper_vidReturnRight+0x2d4>
    2b6e:	88 ec       	ldi	r24, 0xC8	; 200
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9d 83       	std	Y+5, r25	; 0x05
    2b74:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <Stepper_vidReturnRight+0x2c2>
    2b7e:	9d 83       	std	Y+5, r25	; 0x05
    2b80:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b82:	8e 81       	ldd	r24, Y+6	; 0x06
    2b84:	9f 81       	ldd	r25, Y+7	; 0x07
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	9f 83       	std	Y+7, r25	; 0x07
    2b8a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	69 f7       	brne	.-38     	; 0x2b6e <Stepper_vidReturnRight+0x2b6>
    2b94:	24 c0       	rjmp	.+72     	; 0x2bde <Stepper_vidReturnRight+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b96:	68 85       	ldd	r22, Y+8	; 0x08
    2b98:	79 85       	ldd	r23, Y+9	; 0x09
    2b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9f 83       	std	Y+7, r25	; 0x07
    2ba8:	8e 83       	std	Y+6, r24	; 0x06
    2baa:	8e 81       	ldd	r24, Y+6	; 0x06
    2bac:	9f 81       	ldd	r25, Y+7	; 0x07
    2bae:	9b 83       	std	Y+3, r25	; 0x03
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <Stepper_vidReturnRight+0x2fe>
    2bba:	9b 83       	std	Y+3, r25	; 0x03
    2bbc:	8a 83       	std	Y+2, r24	; 0x02
    2bbe:	0f c0       	rjmp	.+30     	; 0x2bde <Stepper_vidReturnRight+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bc0:	69 89       	ldd	r22, Y+17	; 0x11
    2bc2:	7a 89       	ldd	r23, Y+18	; 0x12
    2bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	88 8b       	std	Y+16, r24	; 0x10
    2bd2:	88 89       	ldd	r24, Y+16	; 0x10
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	8a 95       	dec	r24
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <Stepper_vidReturnRight+0x320>
    2bdc:	89 83       	std	Y+1, r24	; 0x01

void Stepper_vidReturnRight ()
{
	DIO_vid_SetPinValue(Stepper_DirectionPin, DIO_uint8_HIGH);	/* Set the direction Pin to the right */

	for (y2; y2 > 0; y2--)
    2bde:	80 91 6b 01 	lds	r24, 0x016B
    2be2:	90 91 6c 01 	lds	r25, 0x016C
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	90 93 6c 01 	sts	0x016C, r25
    2bec:	80 93 6b 01 	sts	0x016B, r24
    2bf0:	80 91 6b 01 	lds	r24, 0x016B
    2bf4:	90 91 6c 01 	lds	r25, 0x016C
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <Stepper_vidReturnRight+0x346>
    2bfc:	6c ce       	rjmp	.-808    	; 0x28d6 <Stepper_vidReturnRight+0x1e>
		_delay_us (2000);
		DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_LOW);	/* Actuator OFF */
		_delay_us (2000);
	}

}
    2bfe:	e0 96       	adiw	r28, 0x30	; 48
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <Stepper_vidOFF>:

void Stepper_vidOFF ()
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
	DIO_vid_SetPinValue(Stepper_StepPin, DIO_uint8_LOW);	/* Actuator OFF */
    2c18:	89 e0       	ldi	r24, 0x09	; 9
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
}
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <StepperSmall_vidClockWise>:

void StepperSmall_vidClockWise ()
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	e2 97       	sbiw	r28, 0x32	; 50
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
	uint16 x;

		DIO_vid_SetPinValue(StepperSmall_DirectionPin, DIO_uint8_HIGH);		/* Set the direction Pin to the left */
    2c3a:	8d e0       	ldi	r24, 0x0D	; 13
    2c3c:	61 e0       	ldi	r22, 0x01	; 1
    2c3e:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>

		for (x = 0; x < Step_Per_Revolution; x++)
    2c42:	1a aa       	std	Y+50, r1	; 0x32
    2c44:	19 aa       	std	Y+49, r1	; 0x31
    2c46:	89 c1       	rjmp	.+786    	; 0x2f5a <StepperSmall_vidClockWise+0x334>
		{
			DIO_vid_SetPinValue(StepperSmall_StepPin, DIO_uint8_HIGH);		/* Actuator rolls backward */
    2c48:	8c e0       	ldi	r24, 0x0C	; 12
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	aa ef       	ldi	r26, 0xFA	; 250
    2c56:	b4 e4       	ldi	r27, 0x44	; 68
    2c58:	8d a7       	std	Y+45, r24	; 0x2d
    2c5a:	9e a7       	std	Y+46, r25	; 0x2e
    2c5c:	af a7       	std	Y+47, r26	; 0x2f
    2c5e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c60:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c62:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c66:	98 a9       	ldd	r25, Y+48	; 0x30
    2c68:	2b ea       	ldi	r18, 0xAB	; 171
    2c6a:	3a ea       	ldi	r19, 0xAA	; 170
    2c6c:	4a e2       	ldi	r20, 0x2A	; 42
    2c6e:	50 e4       	ldi	r21, 0x40	; 64
    2c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	89 a7       	std	Y+41, r24	; 0x29
    2c7a:	9a a7       	std	Y+42, r25	; 0x2a
    2c7c:	ab a7       	std	Y+43, r26	; 0x2b
    2c7e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c80:	69 a5       	ldd	r22, Y+41	; 0x29
    2c82:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c84:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c86:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	40 e8       	ldi	r20, 0x80	; 128
    2c8e:	5f e3       	ldi	r21, 0x3F	; 63
    2c90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c94:	88 23       	and	r24, r24
    2c96:	1c f4       	brge	.+6      	; 0x2c9e <StepperSmall_vidClockWise+0x78>
		__ticks = 1;
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	88 a7       	std	Y+40, r24	; 0x28
    2c9c:	91 c0       	rjmp	.+290    	; 0x2dc0 <StepperSmall_vidClockWise+0x19a>
	else if (__tmp > 255)
    2c9e:	69 a5       	ldd	r22, Y+41	; 0x29
    2ca0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ca2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ca4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	53 e4       	ldi	r21, 0x43	; 67
    2cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	0c f0       	brlt	.+2      	; 0x2cb8 <StepperSmall_vidClockWise+0x92>
    2cb6:	7b c0       	rjmp	.+246    	; 0x2dae <StepperSmall_vidClockWise+0x188>
	{
		_delay_ms(__us / 1000.0);
    2cb8:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cba:	7e a5       	ldd	r23, Y+46	; 0x2e
    2cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a e7       	ldi	r20, 0x7A	; 122
    2cc6:	54 e4       	ldi	r21, 0x44	; 68
    2cc8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	8c a3       	std	Y+36, r24	; 0x24
    2cd2:	9d a3       	std	Y+37, r25	; 0x25
    2cd4:	ae a3       	std	Y+38, r26	; 0x26
    2cd6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd8:	6c a1       	ldd	r22, Y+36	; 0x24
    2cda:	7d a1       	ldd	r23, Y+37	; 0x25
    2cdc:	8e a1       	ldd	r24, Y+38	; 0x26
    2cde:	9f a1       	ldd	r25, Y+39	; 0x27
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	4a ef       	ldi	r20, 0xFA	; 250
    2ce6:	54 e4       	ldi	r21, 0x44	; 68
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	88 a3       	std	Y+32, r24	; 0x20
    2cf2:	99 a3       	std	Y+33, r25	; 0x21
    2cf4:	aa a3       	std	Y+34, r26	; 0x22
    2cf6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2cf8:	68 a1       	ldd	r22, Y+32	; 0x20
    2cfa:	79 a1       	ldd	r23, Y+33	; 0x21
    2cfc:	8a a1       	ldd	r24, Y+34	; 0x22
    2cfe:	9b a1       	ldd	r25, Y+35	; 0x23
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e8       	ldi	r20, 0x80	; 128
    2d06:	5f e3       	ldi	r21, 0x3F	; 63
    2d08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0c:	88 23       	and	r24, r24
    2d0e:	2c f4       	brge	.+10     	; 0x2d1a <StepperSmall_vidClockWise+0xf4>
		__ticks = 1;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	9f 8f       	std	Y+31, r25	; 0x1f
    2d16:	8e 8f       	std	Y+30, r24	; 0x1e
    2d18:	3f c0       	rjmp	.+126    	; 0x2d98 <StepperSmall_vidClockWise+0x172>
	else if (__tmp > 65535)
    2d1a:	68 a1       	ldd	r22, Y+32	; 0x20
    2d1c:	79 a1       	ldd	r23, Y+33	; 0x21
    2d1e:	8a a1       	ldd	r24, Y+34	; 0x22
    2d20:	9b a1       	ldd	r25, Y+35	; 0x23
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	3f ef       	ldi	r19, 0xFF	; 255
    2d26:	4f e7       	ldi	r20, 0x7F	; 127
    2d28:	57 e4       	ldi	r21, 0x47	; 71
    2d2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d2e:	18 16       	cp	r1, r24
    2d30:	4c f5       	brge	.+82     	; 0x2d84 <StepperSmall_vidClockWise+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d32:	6c a1       	ldd	r22, Y+36	; 0x24
    2d34:	7d a1       	ldd	r23, Y+37	; 0x25
    2d36:	8e a1       	ldd	r24, Y+38	; 0x26
    2d38:	9f a1       	ldd	r25, Y+39	; 0x27
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e2       	ldi	r20, 0x20	; 32
    2d40:	51 e4       	ldi	r21, 0x41	; 65
    2d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	9f 8f       	std	Y+31, r25	; 0x1f
    2d58:	8e 8f       	std	Y+30, r24	; 0x1e
    2d5a:	0f c0       	rjmp	.+30     	; 0x2d7a <StepperSmall_vidClockWise+0x154>
    2d5c:	88 ec       	ldi	r24, 0xC8	; 200
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9d 8f       	std	Y+29, r25	; 0x1d
    2d62:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d66:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <StepperSmall_vidClockWise+0x142>
    2d6c:	9d 8f       	std	Y+29, r25	; 0x1d
    2d6e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d72:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	9f 8f       	std	Y+31, r25	; 0x1f
    2d78:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	69 f7       	brne	.-38     	; 0x2d5c <StepperSmall_vidClockWise+0x136>
    2d82:	24 c0       	rjmp	.+72     	; 0x2dcc <StepperSmall_vidClockWise+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d84:	68 a1       	ldd	r22, Y+32	; 0x20
    2d86:	79 a1       	ldd	r23, Y+33	; 0x21
    2d88:	8a a1       	ldd	r24, Y+34	; 0x22
    2d8a:	9b a1       	ldd	r25, Y+35	; 0x23
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	9f 8f       	std	Y+31, r25	; 0x1f
    2d96:	8e 8f       	std	Y+30, r24	; 0x1e
    2d98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d9c:	9b 8f       	std	Y+27, r25	; 0x1b
    2d9e:	8a 8f       	std	Y+26, r24	; 0x1a
    2da0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2da2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <StepperSmall_vidClockWise+0x17e>
    2da8:	9b 8f       	std	Y+27, r25	; 0x1b
    2daa:	8a 8f       	std	Y+26, r24	; 0x1a
    2dac:	0f c0       	rjmp	.+30     	; 0x2dcc <StepperSmall_vidClockWise+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dae:	69 a5       	ldd	r22, Y+41	; 0x29
    2db0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2db2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2db4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	88 a7       	std	Y+40, r24	; 0x28
    2dc0:	88 a5       	ldd	r24, Y+40	; 0x28
    2dc2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dc4:	89 8d       	ldd	r24, Y+25	; 0x19
    2dc6:	8a 95       	dec	r24
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <StepperSmall_vidClockWise+0x1a0>
    2dca:	89 8f       	std	Y+25, r24	; 0x19
			_delay_us (2000);
			DIO_vid_SetPinValue(StepperSmall_StepPin, DIO_uint8_LOW);		/* Actuator OFF */
    2dcc:	8c e0       	ldi	r24, 0x0C	; 12
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	aa ef       	ldi	r26, 0xFA	; 250
    2dda:	b4 e4       	ldi	r27, 0x44	; 68
    2ddc:	8d 8b       	std	Y+21, r24	; 0x15
    2dde:	9e 8b       	std	Y+22, r25	; 0x16
    2de0:	af 8b       	std	Y+23, r26	; 0x17
    2de2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2de4:	6d 89       	ldd	r22, Y+21	; 0x15
    2de6:	7e 89       	ldd	r23, Y+22	; 0x16
    2de8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dea:	98 8d       	ldd	r25, Y+24	; 0x18
    2dec:	2b ea       	ldi	r18, 0xAB	; 171
    2dee:	3a ea       	ldi	r19, 0xAA	; 170
    2df0:	4a e2       	ldi	r20, 0x2A	; 42
    2df2:	50 e4       	ldi	r21, 0x40	; 64
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	89 8b       	std	Y+17, r24	; 0x11
    2dfe:	9a 8b       	std	Y+18, r25	; 0x12
    2e00:	ab 8b       	std	Y+19, r26	; 0x13
    2e02:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e04:	69 89       	ldd	r22, Y+17	; 0x11
    2e06:	7a 89       	ldd	r23, Y+18	; 0x12
    2e08:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e8       	ldi	r20, 0x80	; 128
    2e12:	5f e3       	ldi	r21, 0x3F	; 63
    2e14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e18:	88 23       	and	r24, r24
    2e1a:	1c f4       	brge	.+6      	; 0x2e22 <StepperSmall_vidClockWise+0x1fc>
		__ticks = 1;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	88 8b       	std	Y+16, r24	; 0x10
    2e20:	91 c0       	rjmp	.+290    	; 0x2f44 <StepperSmall_vidClockWise+0x31e>
	else if (__tmp > 255)
    2e22:	69 89       	ldd	r22, Y+17	; 0x11
    2e24:	7a 89       	ldd	r23, Y+18	; 0x12
    2e26:	8b 89       	ldd	r24, Y+19	; 0x13
    2e28:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	53 e4       	ldi	r21, 0x43	; 67
    2e32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	0c f0       	brlt	.+2      	; 0x2e3c <StepperSmall_vidClockWise+0x216>
    2e3a:	7b c0       	rjmp	.+246    	; 0x2f32 <StepperSmall_vidClockWise+0x30c>
	{
		_delay_ms(__us / 1000.0);
    2e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e40:	8f 89       	ldd	r24, Y+23	; 0x17
    2e42:	98 8d       	ldd	r25, Y+24	; 0x18
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a e7       	ldi	r20, 0x7A	; 122
    2e4a:	54 e4       	ldi	r21, 0x44	; 68
    2e4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8c 87       	std	Y+12, r24	; 0x0c
    2e56:	9d 87       	std	Y+13, r25	; 0x0d
    2e58:	ae 87       	std	Y+14, r26	; 0x0e
    2e5a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e60:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e62:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a ef       	ldi	r20, 0xFA	; 250
    2e6a:	54 e4       	ldi	r21, 0x44	; 68
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	88 87       	std	Y+8, r24	; 0x08
    2e76:	99 87       	std	Y+9, r25	; 0x09
    2e78:	aa 87       	std	Y+10, r26	; 0x0a
    2e7a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e7c:	68 85       	ldd	r22, Y+8	; 0x08
    2e7e:	79 85       	ldd	r23, Y+9	; 0x09
    2e80:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e82:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <StepperSmall_vidClockWise+0x278>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9f 83       	std	Y+7, r25	; 0x07
    2e9a:	8e 83       	std	Y+6, r24	; 0x06
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <StepperSmall_vidClockWise+0x2f6>
	else if (__tmp > 65535)
    2e9e:	68 85       	ldd	r22, Y+8	; 0x08
    2ea0:	79 85       	ldd	r23, Y+9	; 0x09
    2ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ea4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	3f ef       	ldi	r19, 0xFF	; 255
    2eaa:	4f e7       	ldi	r20, 0x7F	; 127
    2eac:	57 e4       	ldi	r21, 0x47	; 71
    2eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb2:	18 16       	cp	r1, r24
    2eb4:	4c f5       	brge	.+82     	; 0x2f08 <StepperSmall_vidClockWise+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2eb8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2eba:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ebc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9f 83       	std	Y+7, r25	; 0x07
    2edc:	8e 83       	std	Y+6, r24	; 0x06
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <StepperSmall_vidClockWise+0x2d8>
    2ee0:	88 ec       	ldi	r24, 0xC8	; 200
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	9d 83       	std	Y+5, r25	; 0x05
    2ee6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eea:	9d 81       	ldd	r25, Y+5	; 0x05
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <StepperSmall_vidClockWise+0x2c6>
    2ef0:	9d 83       	std	Y+5, r25	; 0x05
    2ef2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	9f 83       	std	Y+7, r25	; 0x07
    2efc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	8e 81       	ldd	r24, Y+6	; 0x06
    2f00:	9f 81       	ldd	r25, Y+7	; 0x07
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <StepperSmall_vidClockWise+0x2ba>
    2f06:	24 c0       	rjmp	.+72     	; 0x2f50 <StepperSmall_vidClockWise+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	68 85       	ldd	r22, Y+8	; 0x08
    2f0a:	79 85       	ldd	r23, Y+9	; 0x09
    2f0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9f 83       	std	Y+7, r25	; 0x07
    2f1a:	8e 83       	std	Y+6, r24	; 0x06
    2f1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f20:	9b 83       	std	Y+3, r25	; 0x03
    2f22:	8a 83       	std	Y+2, r24	; 0x02
    2f24:	8a 81       	ldd	r24, Y+2	; 0x02
    2f26:	9b 81       	ldd	r25, Y+3	; 0x03
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <StepperSmall_vidClockWise+0x302>
    2f2c:	9b 83       	std	Y+3, r25	; 0x03
    2f2e:	8a 83       	std	Y+2, r24	; 0x02
    2f30:	0f c0       	rjmp	.+30     	; 0x2f50 <StepperSmall_vidClockWise+0x32a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f32:	69 89       	ldd	r22, Y+17	; 0x11
    2f34:	7a 89       	ldd	r23, Y+18	; 0x12
    2f36:	8b 89       	ldd	r24, Y+19	; 0x13
    2f38:	9c 89       	ldd	r25, Y+20	; 0x14
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	88 8b       	std	Y+16, r24	; 0x10
    2f44:	88 89       	ldd	r24, Y+16	; 0x10
    2f46:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	8a 95       	dec	r24
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <StepperSmall_vidClockWise+0x324>
    2f4e:	89 83       	std	Y+1, r24	; 0x01
{
	uint16 x;

		DIO_vid_SetPinValue(StepperSmall_DirectionPin, DIO_uint8_HIGH);		/* Set the direction Pin to the left */

		for (x = 0; x < Step_Per_Revolution; x++)
    2f50:	89 a9       	ldd	r24, Y+49	; 0x31
    2f52:	9a a9       	ldd	r25, Y+50	; 0x32
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	9a ab       	std	Y+50, r25	; 0x32
    2f58:	89 ab       	std	Y+49, r24	; 0x31
    2f5a:	89 a9       	ldd	r24, Y+49	; 0x31
    2f5c:	9a a9       	ldd	r25, Y+50	; 0x32
    2f5e:	8e 3b       	cpi	r24, 0xBE	; 190
    2f60:	91 05       	cpc	r25, r1
    2f62:	08 f4       	brcc	.+2      	; 0x2f66 <StepperSmall_vidClockWise+0x340>
    2f64:	71 ce       	rjmp	.-798    	; 0x2c48 <StepperSmall_vidClockWise+0x22>
			_delay_us (2000);
			DIO_vid_SetPinValue(StepperSmall_StepPin, DIO_uint8_LOW);		/* Actuator OFF */
			_delay_us (2000);
		}

}
    2f66:	e2 96       	adiw	r28, 0x32	; 50
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <StepperSmall_vidCounterClockWise>:

void StepperSmall_vidCounterClockWise ()

{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	e2 97       	sbiw	r28, 0x32	; 50
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61

	uint16 x;

		DIO_vid_SetPinValue(StepperSmall_DirectionPin, DIO_uint8_LOW);		/* Set the direction Pin to the left */
    2f8c:	8d e0       	ldi	r24, 0x0D	; 13
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>

		for (x = 0; x < Step_Per_Revolution; x++)
    2f94:	1a aa       	std	Y+50, r1	; 0x32
    2f96:	19 aa       	std	Y+49, r1	; 0x31
    2f98:	89 c1       	rjmp	.+786    	; 0x32ac <StepperSmall_vidCounterClockWise+0x334>
		{
			DIO_vid_SetPinValue(StepperSmall_StepPin, DIO_uint8_HIGH);		/* Actuator rolls backward */
    2f9a:	8c e0       	ldi	r24, 0x0C	; 12
    2f9c:	61 e0       	ldi	r22, 0x01	; 1
    2f9e:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	aa ef       	ldi	r26, 0xFA	; 250
    2fa8:	b4 e4       	ldi	r27, 0x44	; 68
    2faa:	8d a7       	std	Y+45, r24	; 0x2d
    2fac:	9e a7       	std	Y+46, r25	; 0x2e
    2fae:	af a7       	std	Y+47, r26	; 0x2f
    2fb0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fb2:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fb4:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    2fba:	2b ea       	ldi	r18, 0xAB	; 171
    2fbc:	3a ea       	ldi	r19, 0xAA	; 170
    2fbe:	4a e2       	ldi	r20, 0x2A	; 42
    2fc0:	50 e4       	ldi	r21, 0x40	; 64
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	89 a7       	std	Y+41, r24	; 0x29
    2fcc:	9a a7       	std	Y+42, r25	; 0x2a
    2fce:	ab a7       	std	Y+43, r26	; 0x2b
    2fd0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2fd2:	69 a5       	ldd	r22, Y+41	; 0x29
    2fd4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	1c f4       	brge	.+6      	; 0x2ff0 <StepperSmall_vidCounterClockWise+0x78>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	88 a7       	std	Y+40, r24	; 0x28
    2fee:	91 c0       	rjmp	.+290    	; 0x3112 <StepperSmall_vidCounterClockWise+0x19a>
	else if (__tmp > 255)
    2ff0:	69 a5       	ldd	r22, Y+41	; 0x29
    2ff2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ff4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	53 e4       	ldi	r21, 0x43	; 67
    3000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	0c f0       	brlt	.+2      	; 0x300a <StepperSmall_vidCounterClockWise+0x92>
    3008:	7b c0       	rjmp	.+246    	; 0x3100 <StepperSmall_vidCounterClockWise+0x188>
	{
		_delay_ms(__us / 1000.0);
    300a:	6d a5       	ldd	r22, Y+45	; 0x2d
    300c:	7e a5       	ldd	r23, Y+46	; 0x2e
    300e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3010:	98 a9       	ldd	r25, Y+48	; 0x30
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	4a e7       	ldi	r20, 0x7A	; 122
    3018:	54 e4       	ldi	r21, 0x44	; 68
    301a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	8c a3       	std	Y+36, r24	; 0x24
    3024:	9d a3       	std	Y+37, r25	; 0x25
    3026:	ae a3       	std	Y+38, r26	; 0x26
    3028:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302a:	6c a1       	ldd	r22, Y+36	; 0x24
    302c:	7d a1       	ldd	r23, Y+37	; 0x25
    302e:	8e a1       	ldd	r24, Y+38	; 0x26
    3030:	9f a1       	ldd	r25, Y+39	; 0x27
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	4a ef       	ldi	r20, 0xFA	; 250
    3038:	54 e4       	ldi	r21, 0x44	; 68
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	88 a3       	std	Y+32, r24	; 0x20
    3044:	99 a3       	std	Y+33, r25	; 0x21
    3046:	aa a3       	std	Y+34, r26	; 0x22
    3048:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    304a:	68 a1       	ldd	r22, Y+32	; 0x20
    304c:	79 a1       	ldd	r23, Y+33	; 0x21
    304e:	8a a1       	ldd	r24, Y+34	; 0x22
    3050:	9b a1       	ldd	r25, Y+35	; 0x23
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e8       	ldi	r20, 0x80	; 128
    3058:	5f e3       	ldi	r21, 0x3F	; 63
    305a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    305e:	88 23       	and	r24, r24
    3060:	2c f4       	brge	.+10     	; 0x306c <StepperSmall_vidCounterClockWise+0xf4>
		__ticks = 1;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	9f 8f       	std	Y+31, r25	; 0x1f
    3068:	8e 8f       	std	Y+30, r24	; 0x1e
    306a:	3f c0       	rjmp	.+126    	; 0x30ea <StepperSmall_vidCounterClockWise+0x172>
	else if (__tmp > 65535)
    306c:	68 a1       	ldd	r22, Y+32	; 0x20
    306e:	79 a1       	ldd	r23, Y+33	; 0x21
    3070:	8a a1       	ldd	r24, Y+34	; 0x22
    3072:	9b a1       	ldd	r25, Y+35	; 0x23
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	3f ef       	ldi	r19, 0xFF	; 255
    3078:	4f e7       	ldi	r20, 0x7F	; 127
    307a:	57 e4       	ldi	r21, 0x47	; 71
    307c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3080:	18 16       	cp	r1, r24
    3082:	4c f5       	brge	.+82     	; 0x30d6 <StepperSmall_vidCounterClockWise+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3084:	6c a1       	ldd	r22, Y+36	; 0x24
    3086:	7d a1       	ldd	r23, Y+37	; 0x25
    3088:	8e a1       	ldd	r24, Y+38	; 0x26
    308a:	9f a1       	ldd	r25, Y+39	; 0x27
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e2       	ldi	r20, 0x20	; 32
    3092:	51 e4       	ldi	r21, 0x41	; 65
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9f 8f       	std	Y+31, r25	; 0x1f
    30aa:	8e 8f       	std	Y+30, r24	; 0x1e
    30ac:	0f c0       	rjmp	.+30     	; 0x30cc <StepperSmall_vidCounterClockWise+0x154>
    30ae:	88 ec       	ldi	r24, 0xC8	; 200
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	9d 8f       	std	Y+29, r25	; 0x1d
    30b4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <StepperSmall_vidCounterClockWise+0x142>
    30be:	9d 8f       	std	Y+29, r25	; 0x1d
    30c0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	9f 8f       	std	Y+31, r25	; 0x1f
    30ca:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	69 f7       	brne	.-38     	; 0x30ae <StepperSmall_vidCounterClockWise+0x136>
    30d4:	24 c0       	rjmp	.+72     	; 0x311e <StepperSmall_vidCounterClockWise+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d6:	68 a1       	ldd	r22, Y+32	; 0x20
    30d8:	79 a1       	ldd	r23, Y+33	; 0x21
    30da:	8a a1       	ldd	r24, Y+34	; 0x22
    30dc:	9b a1       	ldd	r25, Y+35	; 0x23
    30de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	9f 8f       	std	Y+31, r25	; 0x1f
    30e8:	8e 8f       	std	Y+30, r24	; 0x1e
    30ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30ee:	9b 8f       	std	Y+27, r25	; 0x1b
    30f0:	8a 8f       	std	Y+26, r24	; 0x1a
    30f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <StepperSmall_vidCounterClockWise+0x17e>
    30fa:	9b 8f       	std	Y+27, r25	; 0x1b
    30fc:	8a 8f       	std	Y+26, r24	; 0x1a
    30fe:	0f c0       	rjmp	.+30     	; 0x311e <StepperSmall_vidCounterClockWise+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3100:	69 a5       	ldd	r22, Y+41	; 0x29
    3102:	7a a5       	ldd	r23, Y+42	; 0x2a
    3104:	8b a5       	ldd	r24, Y+43	; 0x2b
    3106:	9c a5       	ldd	r25, Y+44	; 0x2c
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	88 a7       	std	Y+40, r24	; 0x28
    3112:	88 a5       	ldd	r24, Y+40	; 0x28
    3114:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3116:	89 8d       	ldd	r24, Y+25	; 0x19
    3118:	8a 95       	dec	r24
    311a:	f1 f7       	brne	.-4      	; 0x3118 <StepperSmall_vidCounterClockWise+0x1a0>
    311c:	89 8f       	std	Y+25, r24	; 0x19
			_delay_us (2000);
			DIO_vid_SetPinValue(StepperSmall_StepPin, DIO_uint8_LOW);		/* Actuator OFF */
    311e:	8c e0       	ldi	r24, 0x0C	; 12
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	aa ef       	ldi	r26, 0xFA	; 250
    312c:	b4 e4       	ldi	r27, 0x44	; 68
    312e:	8d 8b       	std	Y+21, r24	; 0x15
    3130:	9e 8b       	std	Y+22, r25	; 0x16
    3132:	af 8b       	std	Y+23, r26	; 0x17
    3134:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3136:	6d 89       	ldd	r22, Y+21	; 0x15
    3138:	7e 89       	ldd	r23, Y+22	; 0x16
    313a:	8f 89       	ldd	r24, Y+23	; 0x17
    313c:	98 8d       	ldd	r25, Y+24	; 0x18
    313e:	2b ea       	ldi	r18, 0xAB	; 171
    3140:	3a ea       	ldi	r19, 0xAA	; 170
    3142:	4a e2       	ldi	r20, 0x2A	; 42
    3144:	50 e4       	ldi	r21, 0x40	; 64
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	89 8b       	std	Y+17, r24	; 0x11
    3150:	9a 8b       	std	Y+18, r25	; 0x12
    3152:	ab 8b       	std	Y+19, r26	; 0x13
    3154:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3156:	69 89       	ldd	r22, Y+17	; 0x11
    3158:	7a 89       	ldd	r23, Y+18	; 0x12
    315a:	8b 89       	ldd	r24, Y+19	; 0x13
    315c:	9c 89       	ldd	r25, Y+20	; 0x14
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e8       	ldi	r20, 0x80	; 128
    3164:	5f e3       	ldi	r21, 0x3F	; 63
    3166:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    316a:	88 23       	and	r24, r24
    316c:	1c f4       	brge	.+6      	; 0x3174 <StepperSmall_vidCounterClockWise+0x1fc>
		__ticks = 1;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	88 8b       	std	Y+16, r24	; 0x10
    3172:	91 c0       	rjmp	.+290    	; 0x3296 <StepperSmall_vidCounterClockWise+0x31e>
	else if (__tmp > 255)
    3174:	69 89       	ldd	r22, Y+17	; 0x11
    3176:	7a 89       	ldd	r23, Y+18	; 0x12
    3178:	8b 89       	ldd	r24, Y+19	; 0x13
    317a:	9c 89       	ldd	r25, Y+20	; 0x14
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	4f e7       	ldi	r20, 0x7F	; 127
    3182:	53 e4       	ldi	r21, 0x43	; 67
    3184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3188:	18 16       	cp	r1, r24
    318a:	0c f0       	brlt	.+2      	; 0x318e <StepperSmall_vidCounterClockWise+0x216>
    318c:	7b c0       	rjmp	.+246    	; 0x3284 <StepperSmall_vidCounterClockWise+0x30c>
	{
		_delay_ms(__us / 1000.0);
    318e:	6d 89       	ldd	r22, Y+21	; 0x15
    3190:	7e 89       	ldd	r23, Y+22	; 0x16
    3192:	8f 89       	ldd	r24, Y+23	; 0x17
    3194:	98 8d       	ldd	r25, Y+24	; 0x18
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	4a e7       	ldi	r20, 0x7A	; 122
    319c:	54 e4       	ldi	r21, 0x44	; 68
    319e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	8c 87       	std	Y+12, r24	; 0x0c
    31a8:	9d 87       	std	Y+13, r25	; 0x0d
    31aa:	ae 87       	std	Y+14, r26	; 0x0e
    31ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    31b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    31b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    31b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	4a ef       	ldi	r20, 0xFA	; 250
    31bc:	54 e4       	ldi	r21, 0x44	; 68
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	88 87       	std	Y+8, r24	; 0x08
    31c8:	99 87       	std	Y+9, r25	; 0x09
    31ca:	aa 87       	std	Y+10, r26	; 0x0a
    31cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31ce:	68 85       	ldd	r22, Y+8	; 0x08
    31d0:	79 85       	ldd	r23, Y+9	; 0x09
    31d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e8       	ldi	r20, 0x80	; 128
    31dc:	5f e3       	ldi	r21, 0x3F	; 63
    31de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e2:	88 23       	and	r24, r24
    31e4:	2c f4       	brge	.+10     	; 0x31f0 <StepperSmall_vidCounterClockWise+0x278>
		__ticks = 1;
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	9f 83       	std	Y+7, r25	; 0x07
    31ec:	8e 83       	std	Y+6, r24	; 0x06
    31ee:	3f c0       	rjmp	.+126    	; 0x326e <StepperSmall_vidCounterClockWise+0x2f6>
	else if (__tmp > 65535)
    31f0:	68 85       	ldd	r22, Y+8	; 0x08
    31f2:	79 85       	ldd	r23, Y+9	; 0x09
    31f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	3f ef       	ldi	r19, 0xFF	; 255
    31fc:	4f e7       	ldi	r20, 0x7F	; 127
    31fe:	57 e4       	ldi	r21, 0x47	; 71
    3200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3204:	18 16       	cp	r1, r24
    3206:	4c f5       	brge	.+82     	; 0x325a <StepperSmall_vidCounterClockWise+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3208:	6c 85       	ldd	r22, Y+12	; 0x0c
    320a:	7d 85       	ldd	r23, Y+13	; 0x0d
    320c:	8e 85       	ldd	r24, Y+14	; 0x0e
    320e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	40 e2       	ldi	r20, 0x20	; 32
    3216:	51 e4       	ldi	r21, 0x41	; 65
    3218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	9f 83       	std	Y+7, r25	; 0x07
    322e:	8e 83       	std	Y+6, r24	; 0x06
    3230:	0f c0       	rjmp	.+30     	; 0x3250 <StepperSmall_vidCounterClockWise+0x2d8>
    3232:	88 ec       	ldi	r24, 0xC8	; 200
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	9d 83       	std	Y+5, r25	; 0x05
    3238:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    323a:	8c 81       	ldd	r24, Y+4	; 0x04
    323c:	9d 81       	ldd	r25, Y+5	; 0x05
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <StepperSmall_vidCounterClockWise+0x2c6>
    3242:	9d 83       	std	Y+5, r25	; 0x05
    3244:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3246:	8e 81       	ldd	r24, Y+6	; 0x06
    3248:	9f 81       	ldd	r25, Y+7	; 0x07
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	9f 83       	std	Y+7, r25	; 0x07
    324e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3250:	8e 81       	ldd	r24, Y+6	; 0x06
    3252:	9f 81       	ldd	r25, Y+7	; 0x07
    3254:	00 97       	sbiw	r24, 0x00	; 0
    3256:	69 f7       	brne	.-38     	; 0x3232 <StepperSmall_vidCounterClockWise+0x2ba>
    3258:	24 c0       	rjmp	.+72     	; 0x32a2 <StepperSmall_vidCounterClockWise+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    325a:	68 85       	ldd	r22, Y+8	; 0x08
    325c:	79 85       	ldd	r23, Y+9	; 0x09
    325e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3260:	9b 85       	ldd	r25, Y+11	; 0x0b
    3262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	9f 83       	std	Y+7, r25	; 0x07
    326c:	8e 83       	std	Y+6, r24	; 0x06
    326e:	8e 81       	ldd	r24, Y+6	; 0x06
    3270:	9f 81       	ldd	r25, Y+7	; 0x07
    3272:	9b 83       	std	Y+3, r25	; 0x03
    3274:	8a 83       	std	Y+2, r24	; 0x02
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	9b 81       	ldd	r25, Y+3	; 0x03
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <StepperSmall_vidCounterClockWise+0x302>
    327e:	9b 83       	std	Y+3, r25	; 0x03
    3280:	8a 83       	std	Y+2, r24	; 0x02
    3282:	0f c0       	rjmp	.+30     	; 0x32a2 <StepperSmall_vidCounterClockWise+0x32a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3284:	69 89       	ldd	r22, Y+17	; 0x11
    3286:	7a 89       	ldd	r23, Y+18	; 0x12
    3288:	8b 89       	ldd	r24, Y+19	; 0x13
    328a:	9c 89       	ldd	r25, Y+20	; 0x14
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	88 8b       	std	Y+16, r24	; 0x10
    3296:	88 89       	ldd	r24, Y+16	; 0x10
    3298:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	8a 95       	dec	r24
    329e:	f1 f7       	brne	.-4      	; 0x329c <StepperSmall_vidCounterClockWise+0x324>
    32a0:	89 83       	std	Y+1, r24	; 0x01

	uint16 x;

		DIO_vid_SetPinValue(StepperSmall_DirectionPin, DIO_uint8_LOW);		/* Set the direction Pin to the left */

		for (x = 0; x < Step_Per_Revolution; x++)
    32a2:	89 a9       	ldd	r24, Y+49	; 0x31
    32a4:	9a a9       	ldd	r25, Y+50	; 0x32
    32a6:	01 96       	adiw	r24, 0x01	; 1
    32a8:	9a ab       	std	Y+50, r25	; 0x32
    32aa:	89 ab       	std	Y+49, r24	; 0x31
    32ac:	89 a9       	ldd	r24, Y+49	; 0x31
    32ae:	9a a9       	ldd	r25, Y+50	; 0x32
    32b0:	8e 3b       	cpi	r24, 0xBE	; 190
    32b2:	91 05       	cpc	r25, r1
    32b4:	08 f4       	brcc	.+2      	; 0x32b8 <StepperSmall_vidCounterClockWise+0x340>
    32b6:	71 ce       	rjmp	.-798    	; 0x2f9a <StepperSmall_vidCounterClockWise+0x22>
			DIO_vid_SetPinValue(StepperSmall_StepPin, DIO_uint8_LOW);		/* Actuator OFF */
			_delay_us (2000);
		}


}
    32b8:	e2 96       	adiw	r28, 0x32	; 50
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <StepperSmall_vidOFF>:

void StepperSmall_vidOFF ()
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
	DIO_vid_SetPinValue(StepperSmall_StepPin, DIO_uint8_LOW);		/* Actuator OFF */
    32d2:	8c e0       	ldi	r24, 0x0C	; 12
    32d4:	60 e0       	ldi	r22, 0x00	; 0
    32d6:	0e 94 7c 07 	call	0xef8	; 0xef8 <DIO_vid_SetPinValue>
}
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <UART_void_SetCBReceive>:
void (*CallBackReceive) (void) ;



void UART_void_SetCBReceive( void (*ptr) (void) )
{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <UART_void_SetCBReceive+0x6>
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	9a 83       	std	Y+2, r25	; 0x02
    32ec:	89 83       	std	Y+1, r24	; 0x01
	CallBackReceive = ptr ;
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	9a 81       	ldd	r25, Y+2	; 0x02
    32f2:	90 93 70 01 	sts	0x0170, r25
    32f6:	80 93 6f 01 	sts	0x016F, r24
}
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <UART_uint8_ReturnUDRValue>:

uint8 UART_uint8_ReturnUDRValue(void)
{
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
	return UDR ;
    330c:	ec e2       	ldi	r30, 0x2C	; 44
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 81       	ld	r24, Z
}
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <UART_voidInit>:


void UART_voidInit(void)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
	/*Enable rx and tx*/
	SET_BIT(UCSRB , RXEN) ;
    3320:	aa e2       	ldi	r26, 0x2A	; 42
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	ea e2       	ldi	r30, 0x2A	; 42
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	80 61       	ori	r24, 0x10	; 16
    332c:	8c 93       	st	X, r24
	SET_BIT(UCSRB , TXEN) ;
    332e:	aa e2       	ldi	r26, 0x2A	; 42
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	ea e2       	ldi	r30, 0x2A	; 42
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	88 60       	ori	r24, 0x08	; 8
    333a:	8c 93       	st	X, r24
	/*enable interrupt*/
	SET_BIT(UCSRB , RXCIE);
    333c:	aa e2       	ldi	r26, 0x2A	; 42
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	ea e2       	ldi	r30, 0x2A	; 42
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	80 68       	ori	r24, 0x80	; 128
    3348:	8c 93       	st	X, r24
	/*Select 8-bit data frame*/
	CLEAR_BIT(UCSRB , UCSZ2) ;
    334a:	aa e2       	ldi	r26, 0x2A	; 42
    334c:	b0 e0       	ldi	r27, 0x00	; 0
    334e:	ea e2       	ldi	r30, 0x2A	; 42
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	80 81       	ld	r24, Z
    3354:	8b 7f       	andi	r24, 0xFB	; 251
    3356:	8c 93       	st	X, r24
	SET_BIT(UCSRC , UCSZ1) ;
    3358:	a0 e4       	ldi	r26, 0x40	; 64
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e0 e4       	ldi	r30, 0x40	; 64
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	84 60       	ori	r24, 0x04	; 4
    3364:	8c 93       	st	X, r24
	SET_BIT(UCSRC , UCSZ0) ;
    3366:	a0 e4       	ldi	r26, 0x40	; 64
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	e0 e4       	ldi	r30, 0x40	; 64
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	82 60       	ori	r24, 0x02	; 2
    3372:	8c 93       	st	X, r24
	/*Select asynchronous mode*/
	CLEAR_BIT(UCSRC , UMSEL);
    3374:	a0 e4       	ldi	r26, 0x40	; 64
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	e0 e4       	ldi	r30, 0x40	; 64
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	8f 7b       	andi	r24, 0xBF	; 191
    3380:	8c 93       	st	X, r24
	/*disable parity bit*/
	CLEAR_BIT(UCSRC,UPM1);
    3382:	a0 e4       	ldi	r26, 0x40	; 64
    3384:	b0 e0       	ldi	r27, 0x00	; 0
    3386:	e0 e4       	ldi	r30, 0x40	; 64
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	8f 7d       	andi	r24, 0xDF	; 223
    338e:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UPM0);
    3390:	a0 e4       	ldi	r26, 0x40	; 64
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e0 e4       	ldi	r30, 0x40	; 64
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	8f 7e       	andi	r24, 0xEF	; 239
    339c:	8c 93       	st	X, r24
	/*Choose one stop bit */
	CLEAR_BIT(UCSRC , USBS);
    339e:	a0 e4       	ldi	r26, 0x40	; 64
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e0 e4       	ldi	r30, 0x40	; 64
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	87 7f       	andi	r24, 0xF7	; 247
    33aa:	8c 93       	st	X, r24
	/*clear clock polarity */
	CLEAR_BIT(UCSRC , UCPOL);
    33ac:	a0 e4       	ldi	r26, 0x40	; 64
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	e0 e4       	ldi	r30, 0x40	; 64
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	8e 7f       	andi	r24, 0xFE	; 254
    33b8:	8c 93       	st	X, r24
	/* select 9600 baud rate */
	UBRRH = 0 ; // write zero on the last bit to choose UBRRH
    33ba:	e0 e4       	ldi	r30, 0x40	; 64
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	10 82       	st	Z, r1
	UBRRL = 51 ;
    33c0:	e9 e2       	ldi	r30, 0x29	; 41
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	83 e3       	ldi	r24, 0x33	; 51
    33c6:	80 83       	st	Z, r24

}
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <UART_voidSendByte>:

void UART_voidSendByte(uint8 Byte)
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA , UDRE) == 0); // stuck here to check if flag is one to sure the UDR is empty
    33da:	eb e2       	ldi	r30, 0x2B	; 43
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	82 95       	swap	r24
    33e2:	86 95       	lsr	r24
    33e4:	87 70       	andi	r24, 0x07	; 7
    33e6:	88 2f       	mov	r24, r24
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	81 70       	andi	r24, 0x01	; 1
    33ec:	90 70       	andi	r25, 0x00	; 0
    33ee:	00 97       	sbiw	r24, 0x00	; 0
    33f0:	a1 f3       	breq	.-24     	; 0x33da <UART_voidSendByte+0xc>
	UDR = Byte ;
    33f2:	ec e2       	ldi	r30, 0x2C	; 44
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	80 83       	st	Z, r24

}
    33fa:	0f 90       	pop	r0
    33fc:	cf 91       	pop	r28
    33fe:	df 91       	pop	r29
    3400:	08 95       	ret

00003402 <UART_uint8ReceiveByte>:

uint8 UART_uint8ReceiveByte(void)
{
    3402:	df 93       	push	r29
    3404:	cf 93       	push	r28
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62

	while(GET_BIT(UCSRA , RXC) == 0);
    340a:	eb e2       	ldi	r30, 0x2B	; 43
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	88 23       	and	r24, r24
    3412:	dc f7       	brge	.-10     	; 0x340a <UART_uint8ReceiveByte+0x8>
	return UDR ;
    3414:	ec e2       	ldi	r30, 0x2C	; 44
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z

}
    341a:	cf 91       	pop	r28
    341c:	df 91       	pop	r29
    341e:	08 95       	ret

00003420 <USART_SendString>:


void USART_SendString(char *str)					/* Send string of USART data function */ 
{
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	00 d0       	rcall	.+0      	; 0x3426 <USART_SendString+0x6>
    3426:	00 d0       	rcall	.+0      	; 0x3428 <USART_SendString+0x8>
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	9c 83       	std	Y+4, r25	; 0x04
    342e:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;																	
    3430:	1a 82       	std	Y+2, r1	; 0x02
    3432:	19 82       	std	Y+1, r1	; 0x01
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <USART_SendString+0x34>
	while (str[i]!=0)
	{
		UART_voidSendByte(str[i]);						/* Send each char of string till the NULL */
    3436:	29 81       	ldd	r18, Y+1	; 0x01
    3438:	3a 81       	ldd	r19, Y+2	; 0x02
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	9c 81       	ldd	r25, Y+4	; 0x04
    343e:	fc 01       	movw	r30, r24
    3440:	e2 0f       	add	r30, r18
    3442:	f3 1f       	adc	r31, r19
    3444:	80 81       	ld	r24, Z
    3446:	0e 94 e7 19 	call	0x33ce	; 0x33ce <UART_voidSendByte>
		i++;
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	9a 81       	ldd	r25, Y+2	; 0x02
    344e:	01 96       	adiw	r24, 0x01	; 1
    3450:	9a 83       	std	Y+2, r25	; 0x02
    3452:	89 83       	std	Y+1, r24	; 0x01


void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
    3454:	29 81       	ldd	r18, Y+1	; 0x01
    3456:	3a 81       	ldd	r19, Y+2	; 0x02
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	9c 81       	ldd	r25, Y+4	; 0x04
    345c:	fc 01       	movw	r30, r24
    345e:	e2 0f       	add	r30, r18
    3460:	f3 1f       	adc	r31, r19
    3462:	80 81       	ld	r24, Z
    3464:	88 23       	and	r24, r24
    3466:	39 f7       	brne	.-50     	; 0x3436 <USART_SendString+0x16>
	{
		UART_voidSendByte(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
}
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <__vector_13>:

void __vector_13(void) __attribute__((signal , used));
void __vector_13(void)
{
    3476:	1f 92       	push	r1
    3478:	0f 92       	push	r0
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	0f 92       	push	r0
    347e:	11 24       	eor	r1, r1
    3480:	2f 93       	push	r18
    3482:	3f 93       	push	r19
    3484:	4f 93       	push	r20
    3486:	5f 93       	push	r21
    3488:	6f 93       	push	r22
    348a:	7f 93       	push	r23
    348c:	8f 93       	push	r24
    348e:	9f 93       	push	r25
    3490:	af 93       	push	r26
    3492:	bf 93       	push	r27
    3494:	ef 93       	push	r30
    3496:	ff 93       	push	r31
    3498:	df 93       	push	r29
    349a:	cf 93       	push	r28
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
	CallBackReceive();
    34a0:	e0 91 6f 01 	lds	r30, 0x016F
    34a4:	f0 91 70 01 	lds	r31, 0x0170
    34a8:	09 95       	icall
}
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	ff 91       	pop	r31
    34b0:	ef 91       	pop	r30
    34b2:	bf 91       	pop	r27
    34b4:	af 91       	pop	r26
    34b6:	9f 91       	pop	r25
    34b8:	8f 91       	pop	r24
    34ba:	7f 91       	pop	r23
    34bc:	6f 91       	pop	r22
    34be:	5f 91       	pop	r21
    34c0:	4f 91       	pop	r20
    34c2:	3f 91       	pop	r19
    34c4:	2f 91       	pop	r18
    34c6:	0f 90       	pop	r0
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	0f 90       	pop	r0
    34cc:	1f 90       	pop	r1
    34ce:	18 95       	reti

000034d0 <TIMER_voidSetCallBack>:

void (*CallBackPointer[TIMER_ISR_NUMBERS]) (void);


void TIMER_voidSetCallBack( void (*Copy_Ptr) (void), uint8 TIMER_INDEX )
{
    34d0:	df 93       	push	r29
    34d2:	cf 93       	push	r28
    34d4:	00 d0       	rcall	.+0      	; 0x34d6 <TIMER_voidSetCallBack+0x6>
    34d6:	0f 92       	push	r0
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	9a 83       	std	Y+2, r25	; 0x02
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	6b 83       	std	Y+3, r22	; 0x03
	CallBackPointer [TIMER_INDEX] = Copy_Ptr ;
    34e2:	8b 81       	ldd	r24, Y+3	; 0x03
    34e4:	88 2f       	mov	r24, r24
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	fc 01       	movw	r30, r24
    34ee:	ef 58       	subi	r30, 0x8F	; 143
    34f0:	fe 4f       	sbci	r31, 0xFE	; 254
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	9a 81       	ldd	r25, Y+2	; 0x02
    34f6:	91 83       	std	Z+1, r25	; 0x01
    34f8:	80 83       	st	Z, r24
}
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <__vector_11>:
//NORMAL Mode
void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
    3506:	1f 92       	push	r1
    3508:	0f 92       	push	r0
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	0f 92       	push	r0
    350e:	11 24       	eor	r1, r1
    3510:	2f 93       	push	r18
    3512:	3f 93       	push	r19
    3514:	4f 93       	push	r20
    3516:	5f 93       	push	r21
    3518:	6f 93       	push	r22
    351a:	7f 93       	push	r23
    351c:	8f 93       	push	r24
    351e:	9f 93       	push	r25
    3520:	af 93       	push	r26
    3522:	bf 93       	push	r27
    3524:	ef 93       	push	r30
    3526:	ff 93       	push	r31
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
	static uint16 counter = 0;
	counter++;
    3530:	80 91 64 01 	lds	r24, 0x0164
    3534:	90 91 65 01 	lds	r25, 0x0165
    3538:	01 96       	adiw	r24, 0x01	; 1
    353a:	90 93 65 01 	sts	0x0165, r25
    353e:	80 93 64 01 	sts	0x0164, r24
	if (counter == Normal_uint16Counter_Value)
    3542:	80 91 64 01 	lds	r24, 0x0164
    3546:	90 91 65 01 	lds	r25, 0x0165
    354a:	27 e0       	ldi	r18, 0x07	; 7
    354c:	80 3d       	cpi	r24, 0xD0	; 208
    354e:	92 07       	cpc	r25, r18
    3550:	61 f4       	brne	.+24     	; 0x356a <__vector_11+0x64>
	{

		CallBackPointer[TIMER_0_INT_NORMAL_OVERFLOW]();
    3552:	e0 91 71 01 	lds	r30, 0x0171
    3556:	f0 91 72 01 	lds	r31, 0x0172
    355a:	09 95       	icall
		counter = 0;
    355c:	10 92 65 01 	sts	0x0165, r1
    3560:	10 92 64 01 	sts	0x0164, r1
		TCNT0 = 0;
    3564:	e2 e5       	ldi	r30, 0x52	; 82
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	10 82       	st	Z, r1

	}
}
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	ff 91       	pop	r31
    3570:	ef 91       	pop	r30
    3572:	bf 91       	pop	r27
    3574:	af 91       	pop	r26
    3576:	9f 91       	pop	r25
    3578:	8f 91       	pop	r24
    357a:	7f 91       	pop	r23
    357c:	6f 91       	pop	r22
    357e:	5f 91       	pop	r21
    3580:	4f 91       	pop	r20
    3582:	3f 91       	pop	r19
    3584:	2f 91       	pop	r18
    3586:	0f 90       	pop	r0
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	0f 90       	pop	r0
    358c:	1f 90       	pop	r1
    358e:	18 95       	reti

00003590 <__vector_10>:

//CTC
void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
    3590:	1f 92       	push	r1
    3592:	0f 92       	push	r0
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	0f 92       	push	r0
    3598:	11 24       	eor	r1, r1
    359a:	2f 93       	push	r18
    359c:	3f 93       	push	r19
    359e:	4f 93       	push	r20
    35a0:	5f 93       	push	r21
    35a2:	6f 93       	push	r22
    35a4:	7f 93       	push	r23
    35a6:	8f 93       	push	r24
    35a8:	9f 93       	push	r25
    35aa:	af 93       	push	r26
    35ac:	bf 93       	push	r27
    35ae:	ef 93       	push	r30
    35b0:	ff 93       	push	r31
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
	static uint16 counter = 0;
	counter++;
    35ba:	80 91 66 01 	lds	r24, 0x0166
    35be:	90 91 67 01 	lds	r25, 0x0167
    35c2:	01 96       	adiw	r24, 0x01	; 1
    35c4:	90 93 67 01 	sts	0x0167, r25
    35c8:	80 93 66 01 	sts	0x0166, r24
	if (counter == CTC_uint16Counter_Value)
    35cc:	80 91 66 01 	lds	r24, 0x0166
    35d0:	90 91 67 01 	lds	r25, 0x0167
    35d4:	27 e0       	ldi	r18, 0x07	; 7
    35d6:	80 3d       	cpi	r24, 0xD0	; 208
    35d8:	92 07       	cpc	r25, r18
    35da:	61 f4       	brne	.+24     	; 0x35f4 <__vector_10+0x64>
	{
		CallBackPointer[TIMER_0_INT_CTC_OVERFLOW]();
    35dc:	e0 91 73 01 	lds	r30, 0x0173
    35e0:	f0 91 74 01 	lds	r31, 0x0174
    35e4:	09 95       	icall
		counter = 0;
    35e6:	10 92 67 01 	sts	0x0167, r1
    35ea:	10 92 66 01 	sts	0x0166, r1
		TCNT0 = 0;
    35ee:	e2 e5       	ldi	r30, 0x52	; 82
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	10 82       	st	Z, r1

	}



}
    35f4:	cf 91       	pop	r28
    35f6:	df 91       	pop	r29
    35f8:	ff 91       	pop	r31
    35fa:	ef 91       	pop	r30
    35fc:	bf 91       	pop	r27
    35fe:	af 91       	pop	r26
    3600:	9f 91       	pop	r25
    3602:	8f 91       	pop	r24
    3604:	7f 91       	pop	r23
    3606:	6f 91       	pop	r22
    3608:	5f 91       	pop	r21
    360a:	4f 91       	pop	r20
    360c:	3f 91       	pop	r19
    360e:	2f 91       	pop	r18
    3610:	0f 90       	pop	r0
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	0f 90       	pop	r0
    3616:	1f 90       	pop	r1
    3618:	18 95       	reti

0000361a <Timer0_Uint8Set_Ocr_Value>:

void Timer0_Uint8Set_Ocr_Value (uint8 OCR0_Value)
{
    361a:	df 93       	push	r29
    361c:	cf 93       	push	r28
    361e:	0f 92       	push	r0
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
    3624:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = OCR0_Value;
    3626:	ec e5       	ldi	r30, 0x5C	; 92
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	80 83       	st	Z, r24
}
    362e:	0f 90       	pop	r0
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <Timer0_vid_Init>:



void Timer0_vid_Init (void)
{
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
					CLEAR_BIT (TCCR0, 5);
					break;
			}

#elif (TIMER_MODE == TIMER_0_Phase_PWM_MODE)
		CLEAR_BIT   (TCCR0, 3);
    363e:	a3 e5       	ldi	r26, 0x53	; 83
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e3 e5       	ldi	r30, 0x53	; 83
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	87 7f       	andi	r24, 0xF7	; 247
    364a:	8c 93       	st	X, r24
		SET_BIT (TCCR0, 6);
    364c:	a3 e5       	ldi	r26, 0x53	; 83
    364e:	b0 e0       	ldi	r27, 0x00	; 0
    3650:	e3 e5       	ldi	r30, 0x53	; 83
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	80 81       	ld	r24, Z
    3656:	80 64       	ori	r24, 0x40	; 64
    3658:	8c 93       	st	X, r24
		//CLEAR_BIT (TCCR0, 4);
		switch (Phase_PWM_MODE)
			{
				//Clear OC0 PIN ON COMPARE MATCH
				case 1:
					SET_BIT (TCCR0, 5);
    365a:	a3 e5       	ldi	r26, 0x53	; 83
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	e3 e5       	ldi	r30, 0x53	; 83
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	80 81       	ld	r24, Z
    3664:	80 62       	ori	r24, 0x20	; 32
    3666:	8c 93       	st	X, r24
					CLEAR_BIT (TCCR0, 4);
    3668:	a3 e5       	ldi	r26, 0x53	; 83
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	e3 e5       	ldi	r30, 0x53	; 83
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	80 81       	ld	r24, Z
    3672:	8f 7e       	andi	r24, 0xEF	; 239
    3674:	8c 93       	st	X, r24

#endif


#if (TIMER_PRESCALAR == PRESCALAR_8)
	CLEAR_BIT   (TCCR0, 2);
    3676:	a3 e5       	ldi	r26, 0x53	; 83
    3678:	b0 e0       	ldi	r27, 0x00	; 0
    367a:	e3 e5       	ldi	r30, 0x53	; 83
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	80 81       	ld	r24, Z
    3680:	8b 7f       	andi	r24, 0xFB	; 251
    3682:	8c 93       	st	X, r24
	SET_BIT     (TCCR0, 1);
    3684:	a3 e5       	ldi	r26, 0x53	; 83
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	e3 e5       	ldi	r30, 0x53	; 83
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	82 60       	ori	r24, 0x02	; 2
    3690:	8c 93       	st	X, r24
	CLEAR_BIT   (TCCR0, 0);
    3692:	a3 e5       	ldi	r26, 0x53	; 83
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	e3 e5       	ldi	r30, 0x53	; 83
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	8e 7f       	andi	r24, 0xFE	; 254
    369e:	8c 93       	st	X, r24
#endif




}
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	08 95       	ret

000036a6 <Timer1_vid_Init>:



void Timer1_vid_Init (void)
{
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62

#if (TIMER1_MODE == TIMER_1_FAST_PWM_MODE_ICR1)
	//CHANNEL A

	SET_BIT(OCR1A, 7);
    36ae:	aa e5       	ldi	r26, 0x5A	; 90
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	ea e5       	ldi	r30, 0x5A	; 90
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	80 68       	ori	r24, 0x80	; 128
    36bc:	11 96       	adiw	r26, 0x01	; 1
    36be:	9c 93       	st	X, r25
    36c0:	8e 93       	st	-X, r24
	CLEAR_BIT(OCR1A, 6);
    36c2:	aa e5       	ldi	r26, 0x5A	; 90
    36c4:	b0 e0       	ldi	r27, 0x00	; 0
    36c6:	ea e5       	ldi	r30, 0x5A	; 90
    36c8:	f0 e0       	ldi	r31, 0x00	; 0
    36ca:	80 81       	ld	r24, Z
    36cc:	91 81       	ldd	r25, Z+1	; 0x01
    36ce:	8f 7b       	andi	r24, 0xBF	; 191
    36d0:	11 96       	adiw	r26, 0x01	; 1
    36d2:	9c 93       	st	X, r25
    36d4:	8e 93       	st	-X, r24

	SET_BIT(TCCR1A, 1);
    36d6:	af e4       	ldi	r26, 0x4F	; 79
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	ef e4       	ldi	r30, 0x4F	; 79
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	82 60       	ori	r24, 0x02	; 2
    36e2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, 0);
    36e4:	af e4       	ldi	r26, 0x4F	; 79
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	ef e4       	ldi	r30, 0x4F	; 79
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	8e 7f       	andi	r24, 0xFE	; 254
    36f0:	8c 93       	st	X, r24

	SET_BIT(TCCR1B, 4);
    36f2:	ae e4       	ldi	r26, 0x4E	; 78
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	ee e4       	ldi	r30, 0x4E	; 78
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	80 61       	ori	r24, 0x10	; 16
    36fe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 3);
    3700:	ae e4       	ldi	r26, 0x4E	; 78
    3702:	b0 e0       	ldi	r27, 0x00	; 0
    3704:	ee e4       	ldi	r30, 0x4E	; 78
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	80 81       	ld	r24, Z
    370a:	88 60       	ori	r24, 0x08	; 8
    370c:	8c 93       	st	X, r24

#endif
}
    370e:	cf 91       	pop	r28
    3710:	df 91       	pop	r29
    3712:	08 95       	ret

00003714 <__mulsi3>:
    3714:	62 9f       	mul	r22, r18
    3716:	d0 01       	movw	r26, r0
    3718:	73 9f       	mul	r23, r19
    371a:	f0 01       	movw	r30, r0
    371c:	82 9f       	mul	r24, r18
    371e:	e0 0d       	add	r30, r0
    3720:	f1 1d       	adc	r31, r1
    3722:	64 9f       	mul	r22, r20
    3724:	e0 0d       	add	r30, r0
    3726:	f1 1d       	adc	r31, r1
    3728:	92 9f       	mul	r25, r18
    372a:	f0 0d       	add	r31, r0
    372c:	83 9f       	mul	r24, r19
    372e:	f0 0d       	add	r31, r0
    3730:	74 9f       	mul	r23, r20
    3732:	f0 0d       	add	r31, r0
    3734:	65 9f       	mul	r22, r21
    3736:	f0 0d       	add	r31, r0
    3738:	99 27       	eor	r25, r25
    373a:	72 9f       	mul	r23, r18
    373c:	b0 0d       	add	r27, r0
    373e:	e1 1d       	adc	r30, r1
    3740:	f9 1f       	adc	r31, r25
    3742:	63 9f       	mul	r22, r19
    3744:	b0 0d       	add	r27, r0
    3746:	e1 1d       	adc	r30, r1
    3748:	f9 1f       	adc	r31, r25
    374a:	bd 01       	movw	r22, r26
    374c:	cf 01       	movw	r24, r30
    374e:	11 24       	eor	r1, r1
    3750:	08 95       	ret

00003752 <__prologue_saves__>:
    3752:	2f 92       	push	r2
    3754:	3f 92       	push	r3
    3756:	4f 92       	push	r4
    3758:	5f 92       	push	r5
    375a:	6f 92       	push	r6
    375c:	7f 92       	push	r7
    375e:	8f 92       	push	r8
    3760:	9f 92       	push	r9
    3762:	af 92       	push	r10
    3764:	bf 92       	push	r11
    3766:	cf 92       	push	r12
    3768:	df 92       	push	r13
    376a:	ef 92       	push	r14
    376c:	ff 92       	push	r15
    376e:	0f 93       	push	r16
    3770:	1f 93       	push	r17
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	ca 1b       	sub	r28, r26
    377c:	db 0b       	sbc	r29, r27
    377e:	0f b6       	in	r0, 0x3f	; 63
    3780:	f8 94       	cli
    3782:	de bf       	out	0x3e, r29	; 62
    3784:	0f be       	out	0x3f, r0	; 63
    3786:	cd bf       	out	0x3d, r28	; 61
    3788:	09 94       	ijmp

0000378a <__epilogue_restores__>:
    378a:	2a 88       	ldd	r2, Y+18	; 0x12
    378c:	39 88       	ldd	r3, Y+17	; 0x11
    378e:	48 88       	ldd	r4, Y+16	; 0x10
    3790:	5f 84       	ldd	r5, Y+15	; 0x0f
    3792:	6e 84       	ldd	r6, Y+14	; 0x0e
    3794:	7d 84       	ldd	r7, Y+13	; 0x0d
    3796:	8c 84       	ldd	r8, Y+12	; 0x0c
    3798:	9b 84       	ldd	r9, Y+11	; 0x0b
    379a:	aa 84       	ldd	r10, Y+10	; 0x0a
    379c:	b9 84       	ldd	r11, Y+9	; 0x09
    379e:	c8 84       	ldd	r12, Y+8	; 0x08
    37a0:	df 80       	ldd	r13, Y+7	; 0x07
    37a2:	ee 80       	ldd	r14, Y+6	; 0x06
    37a4:	fd 80       	ldd	r15, Y+5	; 0x05
    37a6:	0c 81       	ldd	r16, Y+4	; 0x04
    37a8:	1b 81       	ldd	r17, Y+3	; 0x03
    37aa:	aa 81       	ldd	r26, Y+2	; 0x02
    37ac:	b9 81       	ldd	r27, Y+1	; 0x01
    37ae:	ce 0f       	add	r28, r30
    37b0:	d1 1d       	adc	r29, r1
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	ed 01       	movw	r28, r26
    37be:	08 95       	ret

000037c0 <_exit>:
    37c0:	f8 94       	cli

000037c2 <__stop_program>:
    37c2:	ff cf       	rjmp	.-2      	; 0x37c2 <__stop_program>
